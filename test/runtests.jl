using NOMAD, Test

@testset "creation of a Nomad problem : assertions" begin
    function simpletest(x)
        return (true, true, sum(x))
    end

    n = 0
    m = 1
    output_types = ["OBJ"]
    @test_throws(AssertionError, NomadProblem(n,m, output_types, simpletest))

    n = 1
    m = 0
    output_types = String[]
    @test_throws(AssertionError, NomadProblem(n, m, output_types, simpletest))

    n = 1
    m = 1
    output_types = ["OBJ", "PB"]
    @test_throws(AssertionError, NomadProblem(n, m, output_types, simpletest))

    n = 1
    m = 1
    output_types = ["WRONG"]
    @test_throws(AssertionError, solve(NomadProblem(n, m, output_types, simpletest), [1.0]))

    n = 1
    m = 1
    output_types = ["OBJ"]
    input_types = ["R", "B"]
    @test_throws(AssertionError, NomadProblem(n,m, output_types, simpletest,
                                              input_types = input_types))

    n = 1
    m = 1
    output_types = ["OBJ"]
    input_types = ["NOPE"]
    @test_throws(AssertionError, solve(NomadProblem(n,m, output_types, simpletest,
                                                    input_types = input_types),
                                       [1.0]))

    n = 1
    m = 1
    outputs_types = ["OBJ"]
    max_bb_eval = 1
    @test_throws(AssertionError, NomadProblem(n, m, output_types, simpletest,
                                              lower_bound=[3.0;4.0]))

    n = 1
    m = 1
    output_types = ["OBJ"]
    @test_throws(ErrorException, begin
                     p = NomadProblem(n, m, output_types, simpletest)
                     p.options.max_bb_eval = 0
                     solve(p, [1.0])
                 end)

    n = 1
    m = 1
    output_types = ["OBJ"]
    @test_throws(ErrorException, begin
                     p = NomadProblem(n, m, output_types, simpletest)
                     p.options.lh_search = (0,-1)
                     solve(p, [1.0])
                 end)

    n = 1
    m = 1
    output_types = ["OBJ"]
    @test_throws(AssertionError, NomadProblem(n, m, output_types, simpletest,
                                              upper_bound=[3.0;4.0]))

    n = 1
    m = 1
    output_types = ["OBJ"]
    max_bb_eval = 1
    p = NomadProblem(n, m, output_types, simpletest, upper_bound=[1.0])
    @test p.options.display_degree == 2
    @test p.options.display_all_eval == false
    @test p.options.display_unsuccessful == false
    @test p.options.max_bb_eval == 20000
    @test p.options.opportunistic_eval == true
    @test p.options.use_cache == true
    @test p.options.lh_search == (0,0)
    @test p.options.speculative_search == true
    @test p.options.nm_search == true

end

@testset "Example 1" begin

    function bb1(x)
        sum1 = sum(cos.(x).^4)
        sum2 = sum(x)
        sum3 = (1:length(x)) .* x
        prod1 = prod(cos.(x).^2)
        prod2 = prod(x)
        g1 = -prod2 + 0.75
        g2 = sum2 - 7.5 * length(x)
        f = 10 * g1 + 10 * g2
        if (sum3 ≠ 0.0)
            f -= abs((sum1 - 2 * prod1) / sqrt(3))
        end

        # scaling
        f *= 10^(-5)
        c2000 = -f -2000
        return (true, true, [g1; g2; f; c2000])
    end

    p = NomadProblem(10, 4, ["PB"; "PB"; "OBJ"; "EB"], bb1,
                     granularity=0.0000001 * ones(Float64, 10))

    @test p.options.display_degree == 2
    @test p.options.display_all_eval == false
    @test p.options.display_unsuccessful == false
    @test p.options.max_bb_eval == 20000
    @test p.options.opportunistic_eval == true
    @test p.options.use_cache == true
    @test p.options.lh_search == (0,0)
    @test p.options.speculative_search == true
    @test p.options.nm_search == true

    p.options.max_bb_eval = 1000
    p.options.display_all_eval = true
    p.options.display_unsuccessful = false

    # run the problem and get solutions
    result1 = solve(p, 7.0 * ones(Float64, 10))

    # rerun the problem by changing display options
    p.options.display_all_eval = false
    result2 = solve(p, 7.0 * ones(Float64, 10))

    @test result1 == result2

    println(result2)

end

@testset "Example 2 : mustache problem" begin

    # Objective
    function f(x)
        return -x[1]
    end

    # Constraints
    function c(x)
        g = -(abs(cos(x[1])) + 0.1) * sin(x[1]) + 2
        ε = 0.05 + 0.05 * (1 - 1 / (1 + abs(x[1] - 11)))
        constraints = [g - ε - x[2]; x[2] - g - ε]
        return constraints
    end

    # Evaluator
    function bb(x)
        bb_outputs = [f(x); c(x)]
        success = true
        count_eval = true
        return (success, count_eval, bb_outputs)
    end

    p = NomadProblem(2, 3, ["OBJ"; "EB"; "EB"], bb,
                     lower_bound=[0.0;0.0],
                     upper_bound=[20.0;4.0])

    # fix some options
    p.options.max_bb_eval = 1000

    result1 = solve(p, [0.0;2.0])

    result2 = solve(p, [0.0;2.0])

    @test result1 == result2

end

@testset "Constrained linear example 1: HS48" begin

   # blackbox
   function bb(x)
        f = (x[1]- 1)^2 * (x[2] - x[3])^2 + (x[4] - x[5])^2
        bb_outputs = [f]
        success = true
        count_eval = true
        return (success, count_eval, bb_outputs)
   end

   # linear constraints
   A = [1.0 1.0 1.0 1.0 1.0;
        0.0 0.0 1.0 -2.0 -2.0]
   b = [5.0; -3.0]

   p = NomadProblem(5, 1, ["OBJ"], bb,
                    lower_bound = -10.0 * ones(5),
                    upper_bound = 10.0 * ones(5),
                    A = A, b = b)

    p.options.max_bb_eval = 500

    x0 = [0.57186958424864897665429452899843;
          4.9971472653643420613889247761108;
          -1.3793445664086618762667058035731;
          1.0403394252630473459930726676248;
          -0.2300117084673765077695861691609]

    result = solve(p, x0)

    # solve problem
    @test length(result.x_best_feas) == 5
    @test result.x_best_inf == nothing
    @test A * result.x_best_feas ≈ b
    @test all(-10.0 .<= result.x_best_feas .<= 10.0)

end

@testset "Constrained linear example 2: HS49" begin

    # blackbox
    function bb(x)
        f = (x[1]- x[2])^2 * (x[3] - 1)^2 + (x[4] - 1)^4 + (x[5] - 1)^5
        bb_outputs = [f]
        success = true
        count_eval = true
        return (success, count_eval, bb_outputs)
    end

    # linear constraints
    A = [1.0 1.0 1.0 4.0 0.0;
        0.0 0.0 1.0 0.0 5.0]
    b = [7.0; 6.0]

    p = NomadProblem(5,  1,  ["OBJ"],  bb,
                    lower_bound = -10.0 * ones(5),
                    upper_bound = 10.0 * ones(5),
                    A = A,  b = b)

    p.options.max_bb_eval = 500
    p.options.linear_converter = "QR"

    x0 = [-9.4062827285902130824979394674301;
          -8.3159368136382827429997632862069;
          7.2648993701161748148820151982363;
          4.3643300430280804746985268138815;
          -0.25297987402323496297640303964727]

    result = solve(p, x0)

    # solve problem
    @test length(result.x_best_feas) == 5
    @test result.x_best_inf == nothing
    @test A * result.x_best_feas ≈ b
    @test all(-10.0 .<= result.x_best_feas .<= 10.0)

end

@testset "Constrained linear example 3: HS51" begin

    # blackbox
    function bb(x)
        f = (x[1] - x[2])^2 + (x[2] + x[3] - 2)^2 + (x[1] - 1)^2 + (x[5] - 1)^2
        bb_outputs = [f]
        success = true
        count_eval = true
        return (success, count_eval, bb_outputs)
    end

    # linear constraints
    A = [1.0 3.0 0.0 0.0 0.0;
         0.0 0.0 1.0 1.0 -2.0;
         0.0 1.0 0.0 0.0 -1.0]
    b = [4.0; 0.0; 0.0]

    p = NomadProblem(5, 1, ["OBJ"], bb,
                    lower_bound = -10.0 * ones(5),
                    upper_bound = 10.0 * ones(5),
                    A = A, b = b)

    p.options.max_bb_eval = 500

    x0 = [-4.9922003366305780502898414852098;
          2.9974001122101929794894203951117;
          5.9948002244203859589788407902233;
          0;
          2.9974001122101929794894203951117]

    result = solve(p, x0)

    # solve problem
    @test length(result.x_best_feas) == 5
    @test result.x_best_inf == nothing
    @test A * result.x_best_feas ≈ b
    @test all(-10.0 .<= result.x_best_feas .<= 10.0)

end

@testset "Constrained linear example 4: HS53" begin

    # blackbox
    function bb(x)
        f = (x[1] - x[2])^2 + (x[2] + x[3] - 2)^2 + (x[4] - 1)^2 + (x[5] - 1)^2
        bb_outputs = [f]
        success = true
        count_eval = true
        return (success, count_eval, bb_outputs)
    end

    # linear constraints
    A = [1.0 3.0 0.0 0.0 0.0;
         0.0 0.0 1.0 1.0 -2.0;
         0.0 1.0 0.0 0.0 -1.0]
    b = [0.0; 0.0; 0.0]

    p = NomadProblem(5, 1, ["OBJ"], bb,
                    lower_bound = -10.0 * ones(5),
                    upper_bound = 10.0 * ones(5),
                    A = A, b = b)

    p.options.max_bb_eval = 500
    p.options.linear_converter = "QR"
    p.options.linear_constraints_atol=1e-10

    x0 = [-0.33448399215588553445854813617188;
          0.11149466405196184481951604539063;
          5.8168201231494105485353429685347;
          -5.5938307950454859707178911776282;
          0.11149466405196228890872589545324]

    result = solve(p, x0)

    # solve problem
    @test length(result.x_best_feas) == 5
    @test result.x_best_inf == nothing
    @test isapprox(A * result.x_best_feas, b, atol=1e-13)
    @test all(-10.0 .<= result.x_best_feas .<= 10.0)

end

@testset "Constrained linear example 5: HS112" begin

    # blackbox
    function bb(x)
        constraints = [-6.089; -17.164; -34.054; -5.914; -24.721; -14.986; -24.1; -10.708; -26.662; -22.179]
        f = sum(x .* (constraints + log.(x / sum(x))))
        bb_outputs = [f]
        success = true
        count_eval = true
        return (success, count_eval, bb_outputs)
    end

    A = [1.0 2.0 2.0 0.0 0.0 1.0 0.0 0.0 0.0 1.0;
         0.0 0.0 0.0 1.0 2.0 1.0 1.0 0.0 0.0 0.0;
         0.0 0.0 1.0 0.0 0.0 0.0 1.0 1.0 2.0 1.0]

    # linear constraints
    b = [2.0; 1.0; 1.0]

    p = NomadProblem(10, 1, ["OBJ"], bb,
                    lower_bound = 0.000001 * ones(10),
                    upper_bound = 5.0 * ones(10),
                    A = A, b = b)

    p.options.max_bb_eval = 500
    #p.options.linear_converter = "QR"

    x0 = [0.21996482747095053023045352347253;
          0.49260438004158713098945554520469;
          0.10987650586951810960378850268171;
          0.17033560675785591742581459584471;
          0.24400207944340807086902600531175;
          0.27609597490537468589266723029141;
          0.06556425944995335208798081794157;
          0.37113518334450695812520848448912;
          0.077223312767278576296270387047116;
          0.29897742580146435820154238172108]

    result = solve(p, x0)

    # solve problem
    @test length(result.x_best_feas) == 10
    @test bb(result.x_best_feas)[3] ≈ result.bbo_best_feas
    @test result.x_best_inf == nothing
    @test isapprox(A * result.x_best_feas, b, atol=1e-13)
    @test all(0.000001 .<= result.x_best_feas .<= 5.0)

end

@testset "Constrained linear example 6: HS119" begin

    # blackbox
    function bb(x)
        M = zeros(16, 16)
        M = [1.0  0.0  0.0  1.0  0.0  0.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0;
            0.0  1.0  1.0  0.0  0.0  0.0  1.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0;
            0.0  0.0  1.0  0.0  0.0  0.0  1.0  0.0  1.0  1.0  0.0  0.0  0.0  1.0  0.0  0.0;
            0.0  0.0  0.0  1.0  0.0  0.0  1.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  1.0  0.0;
            0.0  0.0  0.0  0.0  1.0  1.0  0.0  0.0  0.0  1.0  0.0  1.0  0.0  0.0  0.0  1.0;
            0.0  0.0  0.0  0.0  0.0  1.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0;
            0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  1.0  0.0  0.0  1.0  0.0  0.0  0.0;
            0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  1.0  0.0  0.0  0.0  0.0  1.0  0.0;
            0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  1.0  0.0  0.0  0.0  1.0;
            0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  1.0  0.0  0.0;
            0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  1.0  0.0  0.0  0.0;
            0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  1.0  0.0  0.0;
            0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  1.0  0.0  0.0;
            0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0;
            0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0;
            0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0]

        f = 0.0
        for i in 1:16
            for j in 1:16
                f += M[i,j] * (x[i]^3 + 1) * (x[j]^3 + 1)
            end
        end
        bb_outputs = [f]
        success = true
        count_eval = true
        return (success, count_eval, bb_outputs)
    end

    # linear constraints
    A = [0.22   0.2    0.19   0.25   0.15   0.11   0.12   0.13   1.0   0.0  0.0  0.0  0.0  0.0  0.0  0.0;
          -1.46   0.0   -1.3    1.82  -1.15   0.0    0.8    0.0    0.0   1.0  0.0  0.0  0.0  0.0  0.0  0.0;
           1.29  -0.89   0.0    0.0   -1.16  -0.96   0.0   -0.49   0.0   0.0  1.0  0.0  0.0  0.0  0.0  0.0;
          -1.1   -1.06   0.95  -0.54   0.0   -1.78  -0.41   0.0    0.0   0.0  0.0  1.0  0.0  0.0  0.0  0.0;
           0.0    0.0    0.0   -1.43   1.51   0.59  -0.33  -0.43   0.0   0.0  0.0  0.0  1.0  0.0  0.0  0.0;
           0.0   -1.72  -0.33   0.0    1.62   1.24   0.21  -0.26   0.0   0.0  0.0  0.0  0.0  1.0  0.0  0.0;
           1.12   0.0    0.0    0.31   0.0    0.0    1.12   0.0   -0.36  0.0  0.0  0.0  0.0  0.0  1.0  0.0;
           0.0    0.45   0.26  -1.1    0.58   0.0   -1.03   0.1    0.0   0.0  0.0  0.0  0.0  0.0  0.0  1.0]
    b = [2.5; 1.1; -3.1; -3.5; 1.3; 2.1; 2.3; -1.5]

    p = NomadProblem(16, 1, ["OBJ"], bb,
                    lower_bound = zeros(16),
                    upper_bound = 5.0 * ones(16),
                    A = A, b = b)

    p.options.max_bb_eval = 700
    #p.options.linear_converter = "QR"

    x0 = [0.47954703198607029346334229558124;
          0.20903361134259468290252925726236;
          1.9195872190834724069219419106958;
          2.0409390972982839329574744624551;
          0.33137413872482429644250601086242;
          2.1982600582891782536876235099044;
          0.66348662113045742128036863505258;
          2.1460997916513342431699129519984;
          0.82761049007325315773897500548628;
          0.43138385705448173412790424663399;
          0.013736797620440043335432456217404;
          0.71250903603782800299626387641183;
          3.5629680206545710774435065104626;
          0.24898677218596276805584466274013;
          0.68505096477339177951648707676213;
          0.4284594451010815263636288818816]

    result = solve(p, x0)

    # solve problem
    @test length(result.x_best_feas) == 16
    @test bb(result.x_best_feas)[3] ≈ result.bbo_best_feas
    @test result.x_best_inf == nothing
    @test isapprox(A * result.x_best_feas, b, atol=1e-13)
    @test all(0.0 .<= result.x_best_feas .<= 5.0)

end

@testset "Constrained linear example 7: Dallas" begin

    # blackbox
    function bb(x)
        f = 0.5 * (-min(x[1], sqrt(448.06)) * sqrt(max(251.2 * (448.06 - min(x[1], sqrt(448.06)) * min(x[1], sqrt(448.06))), 1e-14)) - 448.06 * (sqrt(251.2) * asin(min(x[1], sqrt(448.06)) / sqrt(448.06)))) +
            0.5 * (-min(x[2], sqrt(1915.26)) * sqrt(max(64.63 * (1915.26 - min(x[2], sqrt(1915.26)) * min(x[2], sqrt(1915.26))), 1e-14)) - 1915.26 * (sqrt(64.63) * asin(min(x[2], sqrt(1915.26)) / sqrt(1915.26)))) +
            0.5 * (-min(x[3], sqrt(1077.52)) * sqrt(max(48.14 * (1077.52 - min(x[3], sqrt(1077.52)) * min(x[3], sqrt(1077.52))), 1e-14)) - 1077.52 * (sqrt(48.14) * asin(min(x[3], sqrt(1077.52)) / sqrt(1077.52)))) +
            (((850559.0 / 2.85 * 6900.0) / (122.0^1.85)) / (66.0^4.87)) * abs(x[4])^2 * abs(x[4])^0.85 +
            (((850559.0 / 2.85 * 100.0) / (100.0^1.85)) / (10.0^4.87)) * abs(x[5])^2 * abs(x[5])^0.85 +
            (((850559.0 / 2.85 * 663.0) / (120.0^1.85)) / (36.0^4.87)) * abs(x[6])^2 * abs(x[6])^0.85 +
            (((850559.0 / 2.85 * 5100.0) / (122.0^1.85)) / (66.0^4.87)) * abs(x[7])^2 * abs(x[7])^0.85 +
            (((850559.0 / 2.85 * 645.0) / (120.0^1.85)) / (30.0^4.87)) * abs(x[8])^2 * abs(x[8])^0.85 +
            (((850559.0 / 2.85 * 7400.0) / (122.0^1.85)) / (66.0^4.87)) * abs(x[9])^2 * abs(x[9])^0.85 +
            (((850559.0 / 2.85 * 5000.0) / (95.0^1.85)) / (66.0^4.87)) * abs(x[10])^2 * abs(x[10])^0.85 +
            (((850559.0 / 2.85 * 800.0) / (107.0^1.85)) / (54.0^4.87)) * abs(x[11])^2 * abs(x[11])^0.85 +
            (((850559.0 / 2.85 * 5200.0) / (110.00000000000001^1.85)) / (48.0^4.87)) * abs(x[12])^2 * abs(x[12])^0.85 +
            (((850559.0 / 2.85 * 6000.0) / (110.00000000000001^1.85)) / (48.0^4.87)) * abs(x[13])^2 * abs(x[13])^0.85 +
            (((850559.0 / 2.85 * 400.0) / (100.0^1.85)) / (54.0^4.87)) * abs(x[14])^2 * abs(x[14])^0.85 +
            (((850559.0 / 2.85 * 40.0) / (130.0^1.85)) / (31.22^4.87)) * abs(x[15])^2 * abs(x[15])^0.85 +
            (((850559.0 / 2.85 * 4500.0) / (122.0^1.85)) / (66.0^4.87)) * abs(x[16])^2 * abs(x[16])^0.85 +
            (((850559.0 / 2.85 * 5100.0) / (110.00000000000001^1.85)) / (24.0^4.87)) * abs(x[17])^2 * abs(x[17])^0.85 +
            (((850559.0 / 2.85 * 30.0) / (118.0^1.85)) / (48.0^4.87)) * abs(x[18])^2 * abs(x[18])^0.85 +
            0.5 * (-min(x[19], sqrt(484.53)) * sqrt(max(112.97 * (484.53 - min(x[19], sqrt(484.53)) * min(x[19], sqrt(484.53))), 1e-14)) - 484.53 * (sqrt(112.97) * asin(min(x[19], sqrt(484.53)) / sqrt(484.53)))) +
            (((850559.0 / 2.85 * 26000.0) / (110.00000000000001^1.85)) / (48.0^4.87)) * abs(x[20])^2 * abs(x[20])^0.85 +
            0.5 * (-min(x[21], sqrt(186.88)) * sqrt(max(160.61 * (186.88 - min(x[21], sqrt(186.88)) * min(x[21], sqrt(186.88))), 1e-14)) - 186.88 * (sqrt(160.61) * asin(min(x[21], sqrt(186.88)) / sqrt(186.88)))) +
            (((850559.0 / 2.85 * 520.0) / (130.0^1.85)) / (33.61^4.87)) * abs(x[22])^2 * abs(x[22])^0.85 +
            (((850559.0 / 2.85 * 4600.0) / (95.0^1.85)) / (54.0^4.87)) * abs(x[23])^2 * abs(x[23])^0.85 +
            (((850559.0 / 2.85 * 5400.0) / (95.0^1.85)) / (54.0^4.87)) * abs(x[24])^2 * abs(x[24])^0.85 +
            (((850559.0 / 2.85 * 5600.0) / (110.00000000000001^1.85)) / (12.0^4.87)) * abs(x[25])^2 * abs(x[25])^0.85 +
            (((850559.0 / 2.85 * 3300.0) / (110.00000000000001^1.85)) / (12.0^4.87)) * abs(x[26])^2 * abs(x[26])^0.85 +
            (((850559.0 / 2.85 * 2200.0) / (124.0^1.85)) / (24.0^4.87)) * abs(x[27])^2 * abs(x[27])^0.85 +
            (((850559.0 / 2.85 * 1000.0) / (110.00000000000001^1.85)) / (24.0^4.87)) * abs(x[28])^2 * abs(x[28])^0.85 +
            (((850559.0 / 2.85 * 5900.0) / (112.99999999999999^1.85)) / (24.0^4.87)) * abs(x[29])^2 * abs(x[29])^0.85 +
            (((850559.0 / 2.85 * 2800.0) / (112.99999999999999^1.85)) / (24.0^4.87)) * abs(x[30])^2 * abs(x[30])^0.85 +
            (((850559.0 / 2.85 * 2700.0) / (110.00000000000001^1.85)) / (12.0^4.87)) * abs(x[31])^2 * abs(x[31])^0.85 +
            (((850559.0 / 2.85 * 3100.0) / (95.0^1.85)) / (54.0^4.87)) * abs(x[32])^2 * abs(x[32])^0.85 +
            (((850559.0 / 2.85 * 100.0) / (100.0^1.85)) / (10.0^4.87)) * abs(x[33])^2 * abs(x[33])^0.85 +
            (((850559.0 / 2.85 * 4300.0) / (112.99999999999999^1.85)) / (24.0^4.87)) * abs(x[34])^2 * abs(x[34])^0.85 +
            (((850559.0 / 2.85 * 2200.0) / (95.0^1.85)) / (54.0^4.87)) * abs(x[35])^2 * abs(x[35])^0.85 +
            (((850559.0 / 2.85 * 1800.0) / (110.00000000000001^1.85)) / (54.0^4.87)) * abs(x[36])^2 * abs(x[36])^0.85 +
            (((850559.0 / 2.85 * 100.0) / (110.00000000000001^1.85)) / (24.0^4.87)) * abs(x[37])^2 * abs(x[37])^0.85 +
            (((850559.0 / 2.85 * 1310.0) / (100.0^1.85)) / (30.0^4.87)) * abs(x[38])^2 * abs(x[38])^0.85 +
            (((850559.0 / 2.85 * 665.0) / (120.0^1.85)) / (36.0^4.87)) * abs(x[39])^2 * abs(x[39])^0.85 +
            (((850559.0 / 2.85 * 1100.0) / (120.0^1.85)) / (36.0^4.87)) * abs(x[40])^2 * abs(x[40])^0.85 +
            (((850559.0 / 2.85 * 32.3) / (100.0^1.85)) / (10.0^4.87)) * abs(x[41])^2 * abs(x[41])^0.85 -
            638.4000000000001 * x[42] - 633.0 * x[43] - 554.5 * x[44] - 505.0 * x[45] - 436.9 * x[46]
        bb_outputs = [f]
        success = true
        count_eval = true
        return (success, count_eval, bb_outputs)
    end

    # linear constraints
    A = zeros(30, 46)
    A[1, 46] = 1.0
    A[1, 41] = 1.0
    A[1, 1] = -1.0
    A[2, 45] = 1.0
    A[2, 2] = -1.0
    A[3, 44] = 1.0
    A[3, 3] = -1.0
    A[4, 4] = -1.0
    A[5, 16] = 1.0
    A[5, 7] = -1.0
    A[5, 6] = -1.0
    A[5, 5] = -1.0
    A[6, 7] = 1.0
    A[6, 9] = -1.0
    A[6, 8] = -1.0
    A[7, 9] = 1.0
    A[7, 10] = -1.0
    A[8, 10] = 1.0
    A[8, 2] = 1.0
    A[8, 12] = -1.0
    A[8, 11] = -1.0
    A[9, 12] = 1.0
    A[9, 3] = 1.0
    A[9, 13] = -1.0
    A[10, 4] = 1.0
    A[10, 16] = -1.0
    A[10, 15] = -1.0
    A[10, 14] = -1.0
    A[11, 15] = 1.0
    A[11, 13] = 1.0
    A[11, 5] = 1.0
    A[11, 17] = -1.0
    A[12, 20] = 1.0
    A[12, 19] = 1.0
    A[12, 8] = 1.0
    A[12, 6] = 1.0
    A[12, 18] = -1.0
    A[13, 42] = 1.0
    A[13, 18] = 1.0
    A[13, 19] = -1.0
    A[14, 21] = 1.0
    A[14, 20] = -1.0
    A[15, 43] = 1.0
    A[15, 21] = -1.0
    A[16, 14] = 1.0
    A[16, 11] = 1.0
    A[16, 23] = -1.0
    A[16, 22] = -1.0
    A[17, 23] = 1.0
    A[17, 25] = -1.0
    A[17, 24] = -1.0
    A[18, 31] = 1.0
    A[18, 25] = 1.0
    A[18, 22] = 1.0
    A[18, 26] = -1.0
    A[19, 26] = 1.0
    A[19, 17] = 1.0
    A[19, 28] = -1.0
    A[19, 27] = -1.0
    A[20, 28] = 1.0
    A[21, 31] = -1.0
    A[21, 30] = -1.0
    A[21, 29] = -1.0
    A[22, 30] = 1.0
    A[22, 27] = 1.0
    A[23, 24] = 1.0
    A[23, 32] = -1.0
    A[24, 38] = 1.0
    A[24, 29] = 1.0
    A[24, 34] = -1.0
    A[24, 33] = -1.0
    A[25, 32] = 1.0
    A[25, 35] = -1.0
    A[26, 35] = 1.0
    A[26, 37] = -1.0
    A[26, 36] = -1.0
    A[27, 37] = 1.0
    A[27, 34] = 1.0
    A[28, 36] = 1.0
    A[28, 40] = -1.0
    A[28, 39] = -1.0
    A[28, 38] = -1.0
    A[29, 39] = 1.0
    A[29, 33] = 1.0
    A[29, 1] = 1.0
    A[30, 40] = 1.0
    A[30, 41] = -1.0
    b = [0; 0; 0; 0; 2.8; 0; 0.403; 0.592; 1.156; 0.2; 0.495; 0; 0; 0; 0; 0.313; 0.844; 0.331; 0.053; 0; 0.272; 0.883; 0.571; 0.755; 0; 0.527; 0; 0; 0.0010; 0]

    # bounds
    lb = -200.0 * ones(46)
    lb[1] = 0.0
    lb[2] = 0.0
    lb[3] = 0.0
    lb[19] = 0.0
    lb[21] = 0.0
    ub = 200.0 * ones(46)
    ub[1] = 21.1673
    ub[2] = 43.7635
    ub[3] = 32.8255
    ub[19] = 22.012
    ub[21] = 13.6703

    p = NomadProblem(46, 1, ["OBJ"], bb,
                    lower_bound = lb,
                    upper_bound = ub,
                    A = A, b = b)

    p.options.max_bb_eval = 1000
    p.options.linear_converter = "QR"

    x0 = [0.83664758048025811287828901186003;
          3.3907931209257293758696505392436;
          2.0472068790742703470186825143173;
          0;
          0;
          -3.2029999999999998472333118115785;
          0.40300000000000002486899575160351;
          0;
          0.40300000000000002486899575160351;
          0;
          3.6900000000000003907985046680551;
          -0.89120687907427043050745396612911;
          0;
          0;
          -0.20000000000000001110223024625157;
          0;
          -0.69500000000000006217248937900877;
          8.8191877842418779920308224973269;
          7.3172934448115878325324956676923;
          4.7048943394302895626424287911505;
          4.7048943394302895626424287911505;
          1.9620000000000001882938249764265;
          1.415000000000000035527136788005;
          0.57099999999999995203836533619324;
          0;
          1.6310000000000002273736754432321;
          0.883000000000000007105427357601;
          0;
          -0.27200000000000001953992523340276;
          0;
          0;
          0;
          -0.83564758048025811199011059215991;
          0;
          0;
          -0.52700000000000002398081733190338;
          0;
          0.19135241951974191199070673974347;
          0;
          -0.71835241951974193597152407164685;
          -0.71835241951974193597152407164685;
          -1.5018943394302901594983268296346;
          4.7048943394302895626424287911505;
          2.0472068790742703470186825143173;
          3.3907931209257293758696505392436;
          1.5550000000000001598721155460225];

    result = solve(p, x0)

    # solve problem
    @test length(result.x_best_feas) == 46
    @test bb(result.x_best_feas)[3] ≈ result.bbo_best_feas
    @test result.x_best_inf == nothing
    @test isapprox(A * result.x_best_feas, b, atol=1e-9)
    @test all(lb .<= result.x_best_feas .<= ub)
end

@testset "Constrained linear example 8: Avion2" begin
        # blackbox
        function bb(x)
            f = (x[8] - 0.01 * x[3] * x[1])^2 + (x[13] - (x[16] - x[15] - x[14] * x[11]) / x[11]^2)^2 +
                (-2 * x[12] + x[15] + x[16] + 0.01 * x[4] / x[11])^2 +
                (x[12] - 0.025 * x[15] * x[14]^2 / x[13])^2 +
                (x[17] - 27.5 * x[7] - 1.3 * x[7]^2)^2 +
                (x[18] - 70 * x[8] + 8.6 * x[8]^2)^2 +
                (x[20] - 1000 + x[22]^2 / 24000)^2 +
                (1000 * x[21] - x[24] * x[25])^2 +
                (x[32] + x[27] + x[34] / 790 + 2 - x[31] / x[28] + x[30] * x[21])^2 +
                (x[36] - 1000 * x[21] / (x[29] + 20) - 12 * sqrt(x[21]))^2 +
                (x[9] - 1.25 * x[1] * x[47])^2 + (x[1] - x[24] / x[42])^2 +
                (x[33] - 2.4 * x[5] * sqrt(x[5]) * x[43] / sqrt(x[6]))^2 +
                (x[15] - 0.785 * x[44]^2 * x[21])^2 +
                (x[16] - 0.785 * x[45]^2 * x[21])^2 +
                (x[14] - 2 * (x[32] - x[13] * x[11]^3) / (x[11]^2 * (3 - x[15] * x[11])))^2 +
                (x[46] - 1.15 * x[5] * (15 + 0.15 * x[5]) * (8 + (x[23] * x[6] / (50 * x[1] * x[43]))^1.5))^2
            bb_outputs = [f]
            success = true
            count_eval = true
            return (success, count_eval, bb_outputs)
        end

        # linear constraints
        A = zeros(15, 49)
        A[1, 7] = 1
        A[1, 1] = -0.13
        A[2, 5] = 1
        A[2, 1] = -0.7
        A[3, 6] = 1
        A[3, 2] = -1
        A[4, 10] = 1
        A[4, 9] = -1
        A[4, 7] = -2
        A[4, 5] = -2
        A[4, 8] = -2
        A[5, 19] = 1
        A[5, 10] = -20
        A[6, 24] = 1
        A[6, 22] = -2
        A[7, 34] = 1
        A[7, 20] = -1
        A[7, 33] = -1
        A[8, 35] = 1
        A[8, 22] = -0.137
        A[9, 37] = 1
        A[9, 47] = -35
        A[10, 38] = 1
        A[10, 20] = -0.043
        A[11, 39] = 1
        A[11, 48] = -200
        A[12, 40] = 1
        A[12, 49] = -120
        A[13, 41] = 1
        A[13, 26] = -300
        A[14, 23] = 1
        A[14, 22] = -1
        A[14, 48] = 95
        A[14, 49] = 70
        A[14, 47] = 660
        A[14, 20] = 0.5
        A[15, 31] = 1
        A[15, 35] = -1
        A[15, 37] = 1
        A[15, 38] = 1
        A[15, 39] = 1
        A[15, 40] = 1
        A[15, 41] = 1
        b = [0;0;0;0;0;0;0;0;0;0;0;0;400.0;380.0;-290.0]

        # bounds
        lb = zeros(49)
        lb[1] = 10.0
        lb[2] = 0.0
        lb[3] = 0.0
        lb[4] = 0.0
        lb[5] = 7.0
        lb[6] = 1.5
        lb[7] = 2.0
        lb[8] = 2.0
        lb[9] = 30.0
        lb[10] = 20.0
        lb[11] = 0.01
        lb[12] = 0.0
        lb[13] = -0.2
        lb[14] = 0.1
        lb[15] = 0.0
        lb[16] = 0.0
        lb[17] = 100.0
        lb[18] = 500.0
        lb[19] = 500.0
        lb[20] = 1000.0
        lb[21] = 2.0
        lb[22] = 2000.0
        lb[23] = 3000.0
        lb[24] = 5000.0
        lb[25] = 0.2
        lb[26] = 1.0
        lb[27] = 0.0
        lb[28] = 100.0
        lb[29] = 4.0
        lb[30] = 0.0
        lb[31] = 500.0
        lb[32] = 10.0
        lb[33] = 250.0
        lb[34] = 750.0
        lb[35] = 250.0
        lb[36] = 10.0
        lb[37] = 35.0
        lb[38] = 100.0
        lb[39] = 200.0
        lb[40] = 120.0
        lb[41] = 700.0
        lb[42] = 100.0
        lb[43] = 2.0
        lb[44] = 0.0
        lb[45] = 0.0
        lb[46] = 500.0
        lb[47] = 1.0
        lb[48] = 1.0
        lb[49] = 1.0
        ub = zeros(49)
        ub[1] = 150.0
        ub[2] = 10.0
        ub[3] = 10.0
        ub[4] = 5.0
        ub[5] = 120.0
        ub[6] = 8.0
        ub[7] = 20.0
        ub[8] = 30.0
        ub[9] = 500.0
        ub[10] = 200.0
        ub[11] = 20.0
        ub[12] = 10.0
        ub[13] = -0.001
        ub[14] = 2.0
        ub[15] = 1.0
        ub[16] = 2.0
        ub[17] = 1000.0
        ub[18] = 5000.0
        ub[19] = 5000.0
        ub[20] = 20000.0
        ub[21] = 30.0
        ub[22] = 20000.0
        ub[23] = 30000.0
        ub[24] = 50000.0
        ub[25] = 0.8
        ub[26] = 5.0
        ub[27] = 20.0
        ub[28] = 400.0
        ub[29] = 15.0
        ub[30] = 10.0
        ub[31] = 10000.0
        ub[32] = 50.0
        ub[33] = 5000.0
        ub[34] = 15000.0
        ub[35] = 3000.0
        ub[36] = 5000.0
        ub[37] = 70.0
        ub[38] = 3000.0
        ub[39] = 400.0
        ub[40] = 240.0
        ub[41] = 1900.0
        ub[42] = 1000.0
        ub[43] = 20.0
        ub[44] = 1.0
        ub[45] = 2.0
        ub[46] = 5000.0
        ub[47] = 2.0
        ub[48] = 2.0
        ub[49] = 2.0

        p = NomadProblem(49, 1, ["OBJ"], bb,
                        lower_bound = lb,
                        upper_bound = ub,
                        A = A, b = b)

        p.options.max_bb_eval = 1000
        # p.options.linear_converter = "QR"

        x0 = [17.523006910099461208574211923406;
              1.7396384055922218259127021156019;
              9.8155483015509457089819989050739;
            4.7276563374307745135638469946571;
            12.266104837069622846001948346384;
            1.7396384055922218259127021156019;
            2.2779908983129302235681734600803;
            2.0423333560068464009873423492536;
            30.09649322350883693388823303394;
            63.269351406287633210467902245;
            19.824996028811536774583146325313;
            9.7326951953882634427372977370396;
            -0.14215071718311722559491272477317;
            1.7920520977379386096117741544731;
            0.9573472136776395302604214521125;
            1.9036395576817792818502539375913;
            999.72464385613795911922352388501;
            4999.9433579088699843850918114185;
            1265.387028125752749474486336112;
            2326.2591319192042647046037018299;
            29.813061806826997468533591018058;
            15059.729584655400685733184218407;
            13365.372322563673151307739317417;
            30119.459169310801371466368436813;
            0.5999223511217334214862262342649;
            1.1449062775680061143646071286639;
            19.831708920254410344341522431932;
            399.9469517798883089199080131948;
            14.963196757057126262679958017543;
            9.7542019458888269412000227021053;
            500.03223530369297122888383455575;
            49.815168469688430263886402826756;
            250.23503084264669382719148416072;
            2576.4941627618509301100857555866;
            2063.182953097790232277475297451;
            4999.7983247879665213986299932003;
            37.649708515877740921951044583693;
            100.02914267252577928957180120051;
            252.96824148144128230342175811529;
            139.03174185385077521459606941789;
            743.47188327040180411131586879492;
            999.98042825130175970116397365928;
            19.791539409997547238617698894814;
            0.87282323960930774386923758356716;
            1.7724803490397220695484747921;
            4999.7488866236753892735578119755;
            1.0757059575965068898284471288207;
            1.2648412074072064026353245935752;
            1.1585978487820898230609145684866]

        result = solve(p, x0)

        # solve problem
        @test length(result.x_best_feas) == 49
        @test bb(result.x_best_feas)[3] ≈ result.bbo_best_feas
        @test result.x_best_inf == nothing
        @test isapprox(A * result.x_best_feas, b, atol=1e-9)
        @test all(lb .<= result.x_best_feas .<= ub)
end

@testset "Constrained linear example 9: Loadbal" begin

        # blackbox
        function bb(x)

            # inequality constraints
            B = zeros(20, 31)
            B[1, 1] = 20.0
            B[1, 2] = 80.0
            B[2, 1] = 80.0
            B[2, 2] = 20.0
            B[3, 3] = 20.0
            B[3, 4] = 80.0
            B[4, 3] = 80.0
            B[4, 4] = 20.0
            B[5, 5] = 20.0
            B[5, 6] = 80.0
            B[6, 5] = 80.0
            B[6, 6] = 20.0
            B[7, 9] = 20.0
            B[7, 10] = 80.0
            B[8, 9] = 80.0
            B[8, 10] = 20.0
            B[9, 11] = 20.0
            B[9, 12] = 80.0
            B[10, 11] = 80.0
            B[10, 12] = 20.0
            B[11, 15] = 20.0
            B[11, 16] = 80.0
            B[12, 15] = 80.0
            B[12, 16] = 20.0
            B[13, 17] = 20.0
            B[13, 18] = 80.0
            B[14, 17] = 80.0
            B[14, 18] = 20.0
            B[15, 19] = 20.0
            B[15, 20] = 80.0
            B[16, 19] = 80.0
            B[16, 20] = 20.0
            B[17, 7] = 20.0
            B[17, 8] = 80.0
            B[18, 7] = 80.0
            B[18, 8] = 20.0
            B[19, 13] = 20.0
            B[19, 14] = 80.0
            B[20, 13] = 80.0
            B[20, 14] = 20.0

            d = 999.9 * ones(20)
            d[17:20] .= 9999.9

            c = B * x - d .- 1e-9

            # objective
            f = (x[21] / (100.0 - x[21])) / 102.80000000000001 +
                (x[22] / (100.0 - x[22])) / 102.80000000000001 +
                (x[23] / (20.0 - x[23])) / 102.80000000000001 +
                (x[24] / (100.0 - x[24])) / 102.80000000000001 +
                (x[25] / (100.0 - x[25])) / 102.80000000000001 +
                (x[26] / (20.0 - x[26])) / 102.80000000000001 +
                (x[27] / (20.0 - x[27])) / 102.80000000000001 +
                (x[28] / (100.0 - x[28])) / 102.80000000000001 +
                (x[29] / (20.0 - x[29])) / 102.80000000000001 +
                (x[30] / (20.0 - x[30])) / 102.80000000000001 +
                (x[31] / (20.0 - x[31])) / 102.80000000000001 +
                (x[1] / (1000.0 - (80.0 * x[1] + 20.0 * x[2]))) / 6.425000000000001 +
                (x[1] / (1000.0 - (20.0 * x[1] + 80.0 * x[2]))) / 25.700000000000003 +
                (x[3] / (1000.0 - (80.0 * x[3] + 20.0 * x[4]))) / 6.425000000000001 +
                (x[3] / (1000.0 - (20.0 * x[3] + 80.0 * x[4]))) / 25.700000000000003 +
                (x[5] / (1000.0 - (80.0 * x[5] + 20.0 * x[6]))) / 6.425000000000001 +
                (x[5] / (1000.0 - (20.0 * x[5] + 80.0 * x[6]))) / 25.700000000000003 +
                (x[2] / (1000.0 - (80.0 * x[2] + 20.0 * x[1]))) / 6.425000000000001 +
                (x[2] / (1000.0 - (20.0 * x[2] + 80.0 * x[1]))) / 25.700000000000003 +
                (x[4] / (1000.0 - (80.0 * x[4] + 20.0 * x[3]))) / 6.425000000000001 +
                (x[4] / (1000.0 - (20.0 * x[4] + 80.0 * x[3]))) / 25.700000000000003 +
                (x[6] / (1000.0 - (80.0 * x[6] + 20.0 * x[5]))) / 6.425000000000001 +
                (x[6] / (1000.0 - (20.0 * x[6] + 80.0 * x[5]))) / 25.700000000000003 +
                (x[15] / (1000.0 - (80.0 * x[15] + 20.0 * x[16]))) / 6.425000000000001 +
                (x[15] / (1000.0 - (20.0 * x[15] + 80.0 * x[16]))) / 25.700000000000003 +
                (x[17] / (1000.0 - (80.0 * x[17] + 20.0 * x[18]))) / 6.425000000000001 +
                (x[17] / (1000.0 - (20.0 * x[17] + 80.0 * x[18]))) / 25.700000000000003 +
                (x[19] / (1000.0 - (80.0 * x[19] + 20.0 * x[20]))) / 6.425000000000001 +
                (x[19] / (1000.0 - (20.0 * x[19] + 80.0 * x[20]))) / 25.700000000000003 +
                (x[16] / (1000.0 - (80.0 * x[16] + 20.0 * x[15]))) / 6.425000000000001 +
                (x[16] / (1000.0 - (20.0 * x[16] + 80.0 * x[15]))) / 25.700000000000003 +
                (x[18] / (1000.0 - (80.0 * x[18] + 20.0 * x[17]))) / 6.425000000000001 +
                (x[18] / (1000.0 - (20.0 * x[18] + 80.0 * x[17]))) / 25.700000000000003 +
                (x[20] / (1000.0 - (80.0 * x[20] + 20.0 * x[19]))) / 6.425000000000001 +
                (x[20] / (1000.0 - (20.0 * x[20] + 80.0 * x[19]))) / 25.700000000000003 +
                (x[9] / (1000.0 - (80.0 * x[9] + 20.0 * x[10]))) / 6.425000000000001 +
                (x[9] / (1000.0 - (20.0 * x[9] + 80.0 * x[10]))) / 25.700000000000003 +
                (x[10] / (1000.0 - (80.0 * x[10] + 20.0 * x[9]))) / 6.425000000000001 +
                (x[10] / (1000.0 - (20.0 * x[10] + 80.0 * x[9]))) / 25.700000000000003 +
                (x[11] / (1000.0 - (80.0 * x[11] + 20.0 * x[12]))) / 6.425000000000001 +
                (x[11] / (1000.0 - (20.0 * x[11] + 80.0 * x[12]))) / 25.700000000000003 +
                (x[12] / (1000.0 - (80.0 * x[12] + 20.0 * x[11]))) / 6.425000000000001 +
                (x[12] / (1000.0 - (20.0 * x[12] + 80.0 * x[11]))) / 25.700000000000003 +
                (x[8] / (10000.0 - (80.0 * x[8] + 20.0 * x[7]))) / 6.425000000000001 +
                (x[8] / (10000.0 - (20.0 * x[8] + 80.0 * x[7]))) / 25.700000000000003 +
                (x[7] / (10000.0 - (80.0 * x[7] + 20.0 * x[8]))) / 6.425000000000001 +
                (x[7] / (10000.0 - (20.0 * x[7] + 80.0 * x[8]))) / 25.700000000000003 +
                (x[13] / (10000.0 - (80.0 * x[13] + 20.0 * x[14]))) / 6.425000000000001 +
                (x[13] / (10000.0 - (20.0 * x[13] + 80.0 * x[14]))) / 25.700000000000003 +
                (x[14] / (10000.0 - (80.0 * x[14] + 20.0 * x[13]))) / 6.425000000000001 +
                (x[14] / (10000.0 - (20.0 * x[14] + 80.0 * x[13]))) / 25.700000000000003
            bb_outputs = vcat([f], c)
            success = true
            count_eval = true
            return (success, count_eval, bb_outputs)
        end

        # linear constraints
        A = [1.0 -1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 -1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0;
             0.0  0.0  1.0 -1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 -1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0;
             0.0  0.0  0.0  0.0  1.0 -1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 -1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0;
            -1.0  1.0 -1.0  1.0 -1.0  1.0 -1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 -1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0;
             0.0  0.0  0.0  0.0  0.0  0.0  1.0 -1.0 -1.0  1.0 -1.0  1.0 -1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 -1.0  0.0  0.0  0.0  0.0  0.0  0.0;
             0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0 -1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 -1.0  0.0  0.0  0.0  0.0  0.0;
             0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0 -1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 -1.0  0.0  0.0  0.0  0.0;
             0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0 -1.0 -1.0  1.0 -1.0  1.0 -1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 -1.0  0.0  0.0  0.0;
             0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0 -1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 -1.0  0.0  0.0;
             0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0 -1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 -1.0  0.0;
             0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0 -1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 -1.0]
        b = [-95.0; -95.0; -19.0; -70; -70; -19; -19; -70; -19; -19; -19]

        # bounds
        lb = zeros(31)
        ub = 99.9 * ones(31)
        ub[1:21] .= +Inf

        p = NomadProblem(31, 21, vcat(["OBJ"], ["PB" for i in 1:20]), bb,
                        lower_bound = lb,
                        upper_bound = ub,
                        A = A, b = b)

        p.options.max_bb_eval = 1500
        #p.options.linear_converter = "QR"

        x0 = [0.60093952645423476255359673814382;
              8.9813193490632787785443724715151;
              4.8901799178016949198877227900084;
              2.4845611050860867408118792809546;
              5.2626489205992195152816748304758;
              7.2890206634254974815689820388798;
              6.2667828138721084485496248817071;
              4.8424768389452612638024220359512;
              3.7507643958445160414783003943739;
              6.8102373808264555776759152649902;
              0.13298561365865385619500216307642;
              5.2352696486519665342029838939197;
              6.2006550004563649736155639402568;
              2.7707509319376479872687468741788;
              0.37407584613383138005815453652758;
              2.2812025883515372193244274967583;
              4.7329262796511653021980237099342;
              6.2531548795012934505166413146071;
              0.0010420674342158304289535086795127;
              4.1782514004393140893967029114719;
              86.619620177390956428098434116691;
              97.405618812715601961826905608177;
              16.973628257173722033712692791596;
              76.576826777792888378826319240034;
              76.156158926383383800384763162583;
              15.940527015018060907891594979446;
              13.897715965006687710570076887961;
              81.034468743591645534252165816724;
              17.092873257782294160733727039769;
              17.479771400149871851681382395327;
              14.822790666994901442876653163694]

        result = solve(p, x0)

        # solve problem
        @test length(result.x_best_feas) == 31
        @test bb(result.x_best_feas)[3] ≈ result.bbo_best_feas
        @test result.x_best_inf == nothing
        @test isapprox(A * result.x_best_feas, b, atol=1e-9)
        @test all(lb .<= result.x_best_feas .<= ub)

end

@testset "Constrained linear example 10: ProadPL10" begin

        # blackbox
        function bb(x)

            # inequality linear constraints
            B = zeros(5, 60)
            B[1,1] = 1.0
            B[1,2] = 1.0
            B[1,3] = 1.0
            B[1,4] = 1.0
            B[2,5] = 1.0
            B[2,6] = 1.0
            B[2,7] = 1.0
            B[2,8] = 1.0
            B[3,9] = 1.0
            B[3,10] = 1.0
            B[3,11] = 1.0
            B[3,12] = 1.0
            B[4,13] = 1.0
            B[4,14] = 1.0
            B[4,15] = 1.0
            B[4,16] = 1.0
            B[5,17] = 1.0
            B[5,18] = 1.0
            B[5,19] = 1.0
            B[5,20] = 1.0
            d = [3.0; 6.0; 10.0; 2000.0; 18.0]
            cl = B * x - d

            # inequality quadratic constraints
            cq1 = ((x[7]+x[8])-x[3]+x[4])^2 - 0.1^2 * (x[3]+x[4])^2
            cq2 = ((x[11]+x[12])-x[7]+x[8])^2 - 0.1^2 * (x[7]+x[8])^2
            cq3 = (x[15]+x[16]-x[11]+x[12])^2 - 0.1^2 * (x[11]+x[12])^2
            cq4 =  (x[19]+x[20]-x[15]+x[16])^2 - 0.1^2 * (x[15]+x[16])^2

            # objective
            f = x[21] + 2.0*x[22] + 2.0*x[23] + 3.0*x[24] + 3.0*x[25] +
                2.0*x[26] + 4.0*x[27] + 5.0*x[28] + x[29] + 2.0*x[30] +
                2.0*x[31] + 3.0*x[32] + 3.0*x[33] + 2.0*x[34] + 4.0*x[35] +
                5.0*x[36] + x[37] + 2.0*x[38] + 2.0*x[39] + 3.0*x[40] +
                3.0*x[41] + 2.0*x[42] + 4.0*x[43] + 5.0*x[44] + x[45] +
                2.0*x[46] + 2.0*x[47] + 3.0*x[48] + 3.0*x[49] + 2.0*x[50] +
                4.0*x[51] + 5.0*x[52] + x[53] + 2.0*x[54] + 2.0*x[55] +
                3.0*x[56] + 3.0*x[57] + 2.0*x[58] + 4.0*x[59] + 5.0*x[60]
            bb_outputs = vcat([f], cl, [cq1; cq2; cq3; cq4])
            success = true
            count_eval = true
            return (success, count_eval, bb_outputs)
        end

        # linear constraints
        A = zeros(20, 60)
        A[1, 1] = 1.0
        A[1, 21] = -1.0
        A[1, 22] = 1.0
        A[2, 2] = 1.0
        A[2, 23] = -1.0
        A[2, 24] = 1.0
        A[3, 3] = 1.0
        A[3, 25] = -1.0
        A[3, 26] = 1.0
        A[4, 4] = 1.0
        A[4, 27] = -1.0
        A[4, 28] = 1.0
        A[5, 5] = 1.0
        A[5, 21] = 1.0
        A[5, 29] = -1.0
        A[5, 30] = 1.0
        A[6, 6] = 1.0
        A[6, 23] = 1.0
        A[6, 31] = -1.0
        A[6, 32] = 1.0
        A[7, 7] = 1.0
        A[7, 25] = 1.0
        A[7, 33] = -1.0
        A[7, 34] = 1.0
        A[8, 8] = 1.0
        A[8, 27] = 1.0
        A[8, 35] = -1.0
        A[8, 36] = 1.0
        A[9, 9] = 1.0
        A[9, 29] = 1.0
        A[9, 37] = -1.0
        A[9, 38] = 1.0
        A[10, 10] = 1.0
        A[10, 31] = 1.0
        A[10, 39] = -1.0
        A[10, 40] = 1.0
        A[11, 11] = 1.0
        A[11, 33] = 1.0
        A[11, 41] = -1.0
        A[11, 42] = 1.0
        A[12, 12] = 1.0
        A[12, 35] = 1.0
        A[12, 43] = -1.0
        A[12, 44] = 1.0
        A[13, 13] = 1.0
        A[13, 37] = 1.0
        A[13, 45] = -1.0
        A[13, 46] = 1.0
        A[14, 14] = 1.0
        A[14, 39] = 1.0
        A[14, 47] = -1.0
        A[14, 48] = 1.0
        A[15, 15] = 1.0
        A[15, 41] = 1.0
        A[15, 49] = -1.0
        A[15, 50] = 1.0
        A[16, 16] = 1.0
        A[16, 43] = 1.0
        A[16, 51] = -1.0
        A[16, 52] = 1.0
        A[17, 17] = 1.0
        A[17, 45] = 1.0
        A[17, 53] = -1.0
        A[17, 54] = 1.0
        A[18, 18] = 1.0
        A[18, 47] = 1.0
        A[18, 55] = -1.0
        A[18, 56] = 1.0
        A[19, 19] = 1.0
        A[19, 49] = 1.0
        A[19, 57] = -1.0
        A[19, 58] = 1.0
        A[20, 20] = 1.0
        A[20, 51] = 1.0
        A[20, 59] = -1.0
        A[20, 60] = 1.0

        b = [1.0; 1.0; 1.0; 1.0; 2.667; 1.667; 2.667; 3.333; 2.667; 2.0;
             3.0; 3.0; 2.667; 2.667; 2.667; 2.667; 2.667; 2.333; 2.333; 2.333]

        # bounds
        lb = zeros(60)
        ub = 3.0 * ones(60)

        p = NomadProblem(60, 10, vcat(["OBJ"], ["PB" for i in 1:9]), bb,
                        lower_bound = lb,
                        upper_bound = ub,
                        A = A, b = b)

        p.options.max_bb_eval = 1500
        #p.options.linear_converter = "QR"

        x0 = [0.14954129561742054987938388421753;
              0.20844053841381995906267832197045;
              1.9705939400831828933746692200657;
              0.040177095167868125125121281371321;
              0.46348268676468601379170308973698;
              0.12879485343739974223531419283972;
              2.0378211836047768201751750893891;
              0.093672764835643351766236719413428;
              0.16893563343347434146934915588645;
              0.28215074665196648862064421336981;
              1.4889662925223083878023544457392;
              0.66833152109086679804050845632446;
              2.4687979869984757463896585250041;
              1.6212985617091775214504423274775;
              0.92217882337206802390028315130621;
              0.11418572942069127318376331459149;
              0.039766952562627917722171133618758;
              0.30530763946019456867020380741451;
              0.49796483928101131777310683901305;
              0.41366470994964149587858059931023;
              0.62294316502076974018109467579052;
              1.473401869403349273568437634597;
              0.1903164656355334494186593019549;
              0.98187592722171346260040536435554;
              1.5669514287115320350096681067953;
              0.59635748862834914163499888672959;
              0.82753845144750970419522673182655;
              1.7873613562796415443756359309191;
              0.16224461512268537055625472476095;
              1.7428187633372296261313749710098;
              0.63231531922274031298769614295452;
              1.9802040001498069088370357349049;
              1.0899447607776808766288922925014;
              0.1521721484613718644585134143199;
              0.35196300590797408025522940988594;
              2.7637517896248211535237260250142;
              0.28096700189877160669382760715962;
              2.6167867533426116821715368132573;
              0.53554913807367121592051262268797;
              1.6210830721989641922675673413323;
              0.21027562670397870192573464009911;
              0.63136457340398943749448790185852;
              0.41797072502410403949113515409408;
              2.3976761980252634387511534441728;
              0.51037570437666257561204474768601;
              0.42761071547941470472053993034933;
              0.039990356722139235035040627508351;
              0.55014265693929043088417074613972;
              0.032654923214514935958519004088885;
              1.5672004731384681086581167619443;
              0.2635439354899232200502012801735;
              2.3983874810451277781453427451197;
              0.29075621856788619323808120498143;
              2.4076135616285951890347405424109;
              0.54191341962050298963760042170179;
              2.5296154234381691416899684554664;
              0.3499544580287116124495128133276;
              2.152334695533185460192271420965;
              0.67435951417519379713638727480429;
              2.3301508687356293769710191554623]

        result = solve(p, x0)

        # solve problem
        @test length(result.x_best_feas) == 60
        @test bb(result.x_best_feas)[3] ≈ result.bbo_best_feas
        @test result.x_best_inf == nothing
        @test isapprox(A * result.x_best_feas, b, atol=1e-9)
        @test all(lb .<= result.x_best_feas .<= ub)

end
