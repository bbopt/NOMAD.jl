@testset "Constrained linear example 9: Loadbal" begin

    # blackbox
    function bb(x)

        # inequality constraints
        B = zeros(20, 31)
        B[1, 1] = 20.0
        B[1, 2] = 80.0
        B[2, 1] = 80.0
        B[2, 2] = 20.0
        B[3, 3] = 20.0
        B[3, 4] = 80.0
        B[4, 3] = 80.0
        B[4, 4] = 20.0
        B[5, 5] = 20.0
        B[5, 6] = 80.0
        B[6, 5] = 80.0
        B[6, 6] = 20.0
        B[7, 9] = 20.0
        B[7, 10] = 80.0
        B[8, 9] = 80.0
        B[8, 10] = 20.0
        B[9, 11] = 20.0
        B[9, 12] = 80.0
        B[10, 11] = 80.0
        B[10, 12] = 20.0
        B[11, 15] = 20.0
        B[11, 16] = 80.0
        B[12, 15] = 80.0
        B[12, 16] = 20.0
        B[13, 17] = 20.0
        B[13, 18] = 80.0
        B[14, 17] = 80.0
        B[14, 18] = 20.0
        B[15, 19] = 20.0
        B[15, 20] = 80.0
        B[16, 19] = 80.0
        B[16, 20] = 20.0
        B[17, 7] = 20.0
        B[17, 8] = 80.0
        B[18, 7] = 80.0
        B[18, 8] = 20.0
        B[19, 13] = 20.0
        B[19, 14] = 80.0
        B[20, 13] = 80.0
        B[20, 14] = 20.0

        d = 999.9 * ones(20)
        d[17:20] .= 9999.9

        c = B * x - d .- 1e-9

        # objective
        f = (x[21] / (100.0 - x[21])) / 102.80000000000001 +
        (x[22] / (100.0 - x[22])) / 102.80000000000001 +
        (x[23] / (20.0 - x[23])) / 102.80000000000001 +
        (x[24] / (100.0 - x[24])) / 102.80000000000001 +
        (x[25] / (100.0 - x[25])) / 102.80000000000001 +
        (x[26] / (20.0 - x[26])) / 102.80000000000001 +
        (x[27] / (20.0 - x[27])) / 102.80000000000001 +
        (x[28] / (100.0 - x[28])) / 102.80000000000001 +
        (x[29] / (20.0 - x[29])) / 102.80000000000001 +
        (x[30] / (20.0 - x[30])) / 102.80000000000001 +
        (x[31] / (20.0 - x[31])) / 102.80000000000001 +
        (x[1] / (1000.0 - (80.0 * x[1] + 20.0 * x[2]))) / 6.425000000000001 +
        (x[1] / (1000.0 - (20.0 * x[1] + 80.0 * x[2]))) / 25.700000000000003 +
        (x[3] / (1000.0 - (80.0 * x[3] + 20.0 * x[4]))) / 6.425000000000001 +
        (x[3] / (1000.0 - (20.0 * x[3] + 80.0 * x[4]))) / 25.700000000000003 +
        (x[5] / (1000.0 - (80.0 * x[5] + 20.0 * x[6]))) / 6.425000000000001 +
        (x[5] / (1000.0 - (20.0 * x[5] + 80.0 * x[6]))) / 25.700000000000003 +
        (x[2] / (1000.0 - (80.0 * x[2] + 20.0 * x[1]))) / 6.425000000000001 +
        (x[2] / (1000.0 - (20.0 * x[2] + 80.0 * x[1]))) / 25.700000000000003 +
        (x[4] / (1000.0 - (80.0 * x[4] + 20.0 * x[3]))) / 6.425000000000001 +
        (x[4] / (1000.0 - (20.0 * x[4] + 80.0 * x[3]))) / 25.700000000000003 +
        (x[6] / (1000.0 - (80.0 * x[6] + 20.0 * x[5]))) / 6.425000000000001 +
        (x[6] / (1000.0 - (20.0 * x[6] + 80.0 * x[5]))) / 25.700000000000003 +
        (x[15] / (1000.0 - (80.0 * x[15] + 20.0 * x[16]))) / 6.425000000000001 +
        (x[15] / (1000.0 - (20.0 * x[15] + 80.0 * x[16]))) / 25.700000000000003 +
        (x[17] / (1000.0 - (80.0 * x[17] + 20.0 * x[18]))) / 6.425000000000001 +
        (x[17] / (1000.0 - (20.0 * x[17] + 80.0 * x[18]))) / 25.700000000000003 +
        (x[19] / (1000.0 - (80.0 * x[19] + 20.0 * x[20]))) / 6.425000000000001 +
        (x[19] / (1000.0 - (20.0 * x[19] + 80.0 * x[20]))) / 25.700000000000003 +
        (x[16] / (1000.0 - (80.0 * x[16] + 20.0 * x[15]))) / 6.425000000000001 +
        (x[16] / (1000.0 - (20.0 * x[16] + 80.0 * x[15]))) / 25.700000000000003 +
        (x[18] / (1000.0 - (80.0 * x[18] + 20.0 * x[17]))) / 6.425000000000001 +
        (x[18] / (1000.0 - (20.0 * x[18] + 80.0 * x[17]))) / 25.700000000000003 +
        (x[20] / (1000.0 - (80.0 * x[20] + 20.0 * x[19]))) / 6.425000000000001 +
        (x[20] / (1000.0 - (20.0 * x[20] + 80.0 * x[19]))) / 25.700000000000003 +
        (x[9] / (1000.0 - (80.0 * x[9] + 20.0 * x[10]))) / 6.425000000000001 +
        (x[9] / (1000.0 - (20.0 * x[9] + 80.0 * x[10]))) / 25.700000000000003 +
        (x[10] / (1000.0 - (80.0 * x[10] + 20.0 * x[9]))) / 6.425000000000001 +
        (x[10] / (1000.0 - (20.0 * x[10] + 80.0 * x[9]))) / 25.700000000000003 +
        (x[11] / (1000.0 - (80.0 * x[11] + 20.0 * x[12]))) / 6.425000000000001 +
        (x[11] / (1000.0 - (20.0 * x[11] + 80.0 * x[12]))) / 25.700000000000003 +
        (x[12] / (1000.0 - (80.0 * x[12] + 20.0 * x[11]))) / 6.425000000000001 +
        (x[12] / (1000.0 - (20.0 * x[12] + 80.0 * x[11]))) / 25.700000000000003 +
        (x[8] / (10000.0 - (80.0 * x[8] + 20.0 * x[7]))) / 6.425000000000001 +
        (x[8] / (10000.0 - (20.0 * x[8] + 80.0 * x[7]))) / 25.700000000000003 +
        (x[7] / (10000.0 - (80.0 * x[7] + 20.0 * x[8]))) / 6.425000000000001 +
        (x[7] / (10000.0 - (20.0 * x[7] + 80.0 * x[8]))) / 25.700000000000003 +
        (x[13] / (10000.0 - (80.0 * x[13] + 20.0 * x[14]))) / 6.425000000000001 +
        (x[13] / (10000.0 - (20.0 * x[13] + 80.0 * x[14]))) / 25.700000000000003 +
        (x[14] / (10000.0 - (80.0 * x[14] + 20.0 * x[13]))) / 6.425000000000001 +
        (x[14] / (10000.0 - (20.0 * x[14] + 80.0 * x[13]))) / 25.700000000000003
        bb_outputs = vcat([f], c)
        success = true
        count_eval = true
        return (success, count_eval, bb_outputs)
    end

    # linear constraints
    A = [1.0 -1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 -1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0;
         0.0  0.0  1.0 -1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 -1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0;
         0.0  0.0  0.0  0.0  1.0 -1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 -1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0;
         -1.0  1.0 -1.0  1.0 -1.0  1.0 -1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 -1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0;
         0.0  0.0  0.0  0.0  0.0  0.0  1.0 -1.0 -1.0  1.0 -1.0  1.0 -1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 -1.0  0.0  0.0  0.0  0.0  0.0  0.0;
         0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0 -1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 -1.0  0.0  0.0  0.0  0.0  0.0;
         0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0 -1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 -1.0  0.0  0.0  0.0  0.0;
         0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0 -1.0 -1.0  1.0 -1.0  1.0 -1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 -1.0  0.0  0.0  0.0;
         0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0 -1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 -1.0  0.0  0.0;
         0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0 -1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 -1.0  0.0;
         0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0 -1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 -1.0]
    b = [-95.0; -95.0; -19.0; -70; -70; -19; -19; -70; -19; -19; -19]

    # bounds
    lb = zeros(31)
    ub = 99.9 * ones(31)
    ub[1:21] .= +Inf

    p = NomadProblem(31, 21, vcat(["OBJ"], ["PB" for i in 1:20]), bb,
                     lower_bound = lb,
                     upper_bound = ub,
                     A = A, b = b)

    p.options.max_bb_eval = 1500
    #p.options.linear_converter = "QR"

    x0 = [0.60093952645423476255359673814382;
          8.9813193490632787785443724715151;
          4.8901799178016949198877227900084;
          2.4845611050860867408118792809546;
          5.2626489205992195152816748304758;
          7.2890206634254974815689820388798;
          6.2667828138721084485496248817071;
          4.8424768389452612638024220359512;
          3.7507643958445160414783003943739;
          6.8102373808264555776759152649902;
          0.13298561365865385619500216307642;
          5.2352696486519665342029838939197;
          6.2006550004563649736155639402568;
          2.7707509319376479872687468741788;
          0.37407584613383138005815453652758;
          2.2812025883515372193244274967583;
          4.7329262796511653021980237099342;
          6.2531548795012934505166413146071;
          0.0010420674342158304289535086795127;
          4.1782514004393140893967029114719;
          86.619620177390956428098434116691;
          97.405618812715601961826905608177;
          16.973628257173722033712692791596;
          76.576826777792888378826319240034;
          76.156158926383383800384763162583;
          15.940527015018060907891594979446;
          13.897715965006687710570076887961;
          81.034468743591645534252165816724;
          17.092873257782294160733727039769;
          17.479771400149871851681382395327;
          14.822790666994901442876653163694]

    result = solve(p, x0)

    # solve problem
    @test length(result.x_best_feas) == 31
    @test bb(result.x_best_feas)[3] â‰ˆ result.bbo_best_feas
    @test result.x_best_inf === nothing
    @test isapprox(A * result.x_best_feas, b, atol=1e-9)
    @test all(lb .<= result.x_best_feas .<= ub)

end
