@testset "Constrained linear example 9: Loadbal" begin

    # blackbox
    function bb(x)

        # Definition of the variables
        b1 = x[21]
        b2 = x[22]
        b3 = x[23]
        b4 = x[24]
        b5 = x[25]
        b6 = x[26]
        b7 = x[27]
        b8 = x[28]
        b9 = x[29]
        b10 = x[30]
        b11 = x[31]

        x4_1 = x[1]
        x1_4 = x[2]
        x4_2 = x[3]
        x2_4 = x[4]
        x4_3 = x[5]
        x3_4 = x[6]
        x4_5 = x[7]
        x5_4 = x[8]
        x5_6 = x[9]
        x6_5 = x[10]
        x5_7 = x[11]
        x7_5 = x[12]
        x5_8 = x[13]
        x8_5 = x[14]
        x8_9 = x[15]
        x9_8 = x[16]
        x8_10 = x[17]
        x10_8 = x[18]
        x8_11 = x[19]
        x11_8 = x[20]

        # inequality constraints
        B = zeros(20, 31)
        # cnst1: 0 >= 20.0*x4_1 + 80.0*x1_4 - 999.99;
        B[1, 1] = 20.0
        B[1, 2] = 80.0
        # cnst2: 0 >= 80.0*x4_1 + 20.0*x1_4 - 999.99;
        B[2, 1] = 80.0
        B[2, 2] = 20.0
        # cnst3: 0 >= 20.0*x4_2 + 80.0*x2_4 - 999.99;
        B[3, 3] = 20.0
        B[3, 4] = 80.0
        # cnst4: 0 >= 80.0*x4_2 + 20.0*x2_4 - 999.99;
        B[4, 3] = 80.0
        B[4, 4] = 20.0
        # cnst5: 0 >= 20.0*x4_3 + 80.0*x3_4 - 999.99;
        B[5, 5] = 20.0
        B[5, 6] = 80.0
        # cnst6: 0 >= 80.0*x4_3 + 20.0*x3_4 - 999.99;
        B[6, 5] = 80.0
        B[6, 6] = 20.0
        # cnst7: 0 >= 20.0*x5_6 + 80.0*x6_5 - 999.99;
        B[7, 9] = 20.0
        B[7, 10] = 80.0
        # cnst8: 0 >= 80.0*x5_6 + 20.0*x6_5 - 999.99;
        B[8, 9] = 80.0
        B[8, 10] = 20.0
        # cnst9: 0 >= 20.0*x5_7 + 80.0*x7_5 - 999.99;
        B[9, 11] = 20.0
        B[9, 12] = 80.0
        # cnst10: 0 >= 80.0*x5_7 + 20.0*x7_5 - 999.99;
        B[10, 11] = 80.0
        B[10, 12] = 20.0
        # cnst11: 0 >= 20.0*x8_9 + 80.0*x9_8 - 999.99;
        B[11, 15] = 20.0
        B[11, 16] = 80.0
        # cnst12: 0 >= 80.0*x8_9 + 20.0*x9_8 - 999.99;
        B[12, 15] = 80.0
        B[12, 16] = 20.0
        # cnst13: 0 >= 20.0*x8_10 + 80.0*x10_8 - 999.99;
        B[13, 17] = 20.0
        B[13, 18] = 80.0
        # cnst14: 0 >= 80.0*x8_10 + 20.0*x10_8 - 999.99;
        B[14, 17] = 80.0
        B[14, 18] = 20.0
        # cnst15: 0 >= 20.0*x8_11 + 80.0*x11_8 - 999.99;
        B[15, 19] = 20.0
        B[15, 20] = 80.0
        # cnst16: 0 >= 80.0*x8_11 + 20.0*x11_8 - 999.99;
        B[16, 19] = 80.0
        B[16, 20] = 20.0
        # cnst17: 0 >= 20.0*x4_5 + 80.0*x5_4 - 9999.99;
        B[17, 7] = 20.0
        B[17, 8] = 80.0
        # cnst18: 0 >= 80.0*x4_5 + 20.0*x5_4 - 9999.99;
        B[18, 7] = 80.0
        B[18, 8] = 20.0
        # cnst19: 0 >= 20.0*x5_8 + 80.0*x8_5 - 9999.99;
        B[19, 13] = 20.0
        B[19, 14] = 80.0
        # cnst20: 0 >= 80.0*x5_8 + 20.0*x8_5 - 9999.99;
        B[20, 13] = 80.0
        B[20, 14] = 20.0

        d = 999.9 * ones(20)
        d[17:20] .= 9999.9

        c = B * x - d .- 1e-9

        # objective
        f = ((b1 / (100.0 - b1)) / 102.80000000000001) +
            ((b2 / (100.0 - b2)) / 102.80000000000001) +
            ((b3 / (20.0 - b3)) / 102.80000000000001) +
            ((b4 / (100.0 - b4)) / 102.80000000000001) +
            ((b5 / (100.0 - b5)) / 102.80000000000001) +
            ((b6 / (20.0 - b6)) / 102.80000000000001) +
            ((b7 / (20.0 - b7)) / 102.80000000000001) +
            ((b8 / (100.0 - b8)) / 102.80000000000001) +
            ((b9 / (20.0 - b9)) / 102.80000000000001) +
            ((b10 / (20.0 - b10)) / 102.80000000000001) +
            ((b11 / (20.0 - b11)) / 102.80000000000001) +
            ((x4_1 / (1000.0 - (80.0 * x4_1 + 20.0 * x1_4))) / 6.425000000000001) +
            ((x4_1 / (1000.0 - (20.0 * x4_1 + 80.0 * x1_4))) / 25.700000000000003) +
            ((x4_2 / (1000.0 - (80.0 * x4_2 + 20.0 * x2_4))) / 6.425000000000001) +
            ((x4_2 / (1000.0 - (20.0 * x4_2 + 80.0 * x2_4))) / 25.700000000000003) +
            ((x4_3 / (1000.0 - (80.0 * x4_3 + 20.0 * x3_4))) / 6.425000000000001) +
            ((x4_3 / (1000.0 - (20.0 * x4_3 + 80.0 * x3_4))) / 25.700000000000003) +
            ((x1_4 / (1000.0 - (80.0 * x1_4 + 20.0 * x4_1))) / 6.425000000000001) +
            ((x1_4 / (1000.0 - (20.0 * x1_4 + 80.0 * x4_1))) / 25.700000000000003) +
            ((x2_4 / (1000.0 - (80.0 * x2_4 + 20.0 * x4_2))) / 6.425000000000001) +
            ((x2_4 / (1000.0 - (20.0 * x2_4 + 80.0 * x4_2))) / 25.700000000000003) +
            ((x3_4 / (1000.0 - (80.0 * x3_4 + 20.0 * x4_3))) / 6.425000000000001) +
            ((x3_4 / (1000.0 - (20.0 * x3_4 + 80.0 * x4_3))) / 25.700000000000003) +
            ((x8_9 / (1000.0 - (80.0 * x8_9 + 20.0 * x9_8))) / 6.425000000000001) +
            ((x8_9 / (1000.0 - (20.0 * x8_9 + 80.0 * x9_8))) / 25.700000000000003) +
            ((x8_10 / (1000.0 - (80.0 * x8_10 + 20.0 * x10_8))) / 6.425000000000001) +
            ((x8_10 / (1000.0 - (20.0 * x8_10 + 80.0 * x10_8))) / 25.700000000000003) +
            ((x8_11 / (1000.0 - (80.0 * x8_11 + 20.0 * x11_8))) / 6.425000000000001) +
            ((x8_11 / (1000.0 - (20.0 * x8_11 + 80.0 * x11_8))) / 25.700000000000003) +
            ((x9_8 / (1000.0 - (80.0 * x9_8 + 20.0 * x8_9))) / 6.425000000000001) +
            ((x9_8 / (1000.0 - (20.0 * x9_8 + 80.0 * x8_9))) / 25.700000000000003) +
            ((x10_8 / (1000.0 - (80.0 * x10_8 + 20.0 * x8_10))) / 6.425000000000001) +
            ((x10_8 / (1000.0 - (20.0 * x10_8 + 80.0 * x8_10))) / 25.700000000000003) +
            ((x11_8 / (1000.0 - (80.0 * x11_8 + 20.0 * x8_11))) / 6.425000000000001) +
            ((x11_8 / (1000.0 - (20.0 * x11_8 + 80.0 * x8_11))) / 25.700000000000003) +
            ((x5_6 / (1000.0 - (80.0 * x5_6 + 20.0 * x6_5))) / 6.425000000000001) +
            ((x5_6 / (1000.0 - (20.0 * x5_6 + 80.0 * x6_5))) / 25.700000000000003) +
            ((x6_5 / (1000.0 - (80.0 * x6_5 + 20.0 * x5_6))) / 6.425000000000001) +
            ((x6_5 / (1000.0 - (20.0 * x6_5 + 80.0 * x5_6))) / 25.700000000000003) +
            ((x5_7 / (1000.0 - (80.0 * x5_7 + 20.0 * x7_5))) / 6.425000000000001) +
            ((x5_7 / (1000.0 - (20.0 * x5_7 + 80.0 * x7_5))) / 25.700000000000003) +
            ((x7_5 / (1000.0 - (80.0 * x7_5 + 20.0 * x5_7))) / 6.425000000000001) +
            ((x7_5 / (1000.0 - (20.0 * x7_5 + 80.0 * x5_7))) / 25.700000000000003) +
            ((x5_4 / (10000.0 - (80.0 * x5_4 + 20.0 * x4_5))) / 6.425000000000001) +
            ((x5_4 / (10000.0 - (20.0 * x5_4 + 80.0 * x4_5))) / 25.700000000000003) +
            ((x4_5 / (10000.0 - (80.0 * x4_5 + 20.0 * x5_4))) / 6.425000000000001) +
            ((x4_5 / (10000.0 - (20.0 * x4_5 + 80.0 * x5_4))) / 25.700000000000003) +
            ((x5_8 / (10000.0 - (80.0 * x5_8 + 20.0 * x8_5))) / 6.425000000000001) +
            ((x5_8 / (10000.0 - (20.0 * x5_8 + 80.0 * x8_5))) / 25.700000000000003) +
            ((x8_5 / (10000.0 - (80.0 * x8_5 + 20.0 * x5_8))) / 6.425000000000001) +
            ((x8_5 / (10000.0 - (20.0 * x8_5 + 80.0 * x5_8))) / 25.700000000000003)
        bb_outputs = vcat([f], c)
        success = true
        count_eval = true
        return (success, count_eval, bb_outputs)
    end

    # linear constraints
    A = zeros(11, 31)
    # subject to n1: x4_1 - x1_4 - b1 + 95.0 = 0;
    A[1, 1] = 1.0
    A[1, 2] = -1.0
    A[1, 21] = -1.0
    # subject to n2: x4_2 - x2_4 - b2 + 95.0 = 0;
    A[2, 3] = 1.0
    A[2, 4] = -1.0
    A[2, 22] = -1.0
    # subject to n3: x4_3 - x3_4 - b3 + 19.0 = 0;
    A[3, 5] = 1.0
    A[3, 6] = -1.0
    A[3, 23] = -1.0
    # subject to n4: -x4_1 + x1_4 - x4_2 + x2_4 - x4_3 + x3_4 - x4_5 + x5_4 - b4 + 70.0 = 0;
    A[4, 1] = -1.0
    A[4, 2] = 1.0
    A[4, 3] = -1.0
    A[4, 4] = 1.0
    A[4, 5] = -1.0
    A[4, 6] = 1.0
    A[4, 7] = -1.0
    A[4, 8] = 1.0
    A[4, 24] = -1.0
    # subject to n5: x4_5 - x5_4 - x5_6 + x6_5 - x5_7 + x7_5 - x5_8 + x8_5 - b5 + 70.0 = 0;
    A[5, 7] = 1.0
    A[5, 8] = -1.0
    A[5, 9] = -1.0
    A[5, 10] = 1.0
    A[5, 11] = -1.0
    A[5, 12] = 1.0
    A[5, 13] = -1.0
    A[5, 14] = 1.0
    A[5, 25] = -1.0
    # subject to n6: x5_6 - x6_5 - b6 + 19.0 = 0;
    A[6, 9] = 1.0
    A[6, 10] = -1.0
    A[6, 26] = -1.0
    # subject to n7: x5_7 - x7_5 - b7 + 19.0 = 0;
    A[7, 11] = 1.0
    A[7, 12] = -1.0
    A[7, 27] = -1.0
    # subject to n8: x5_8 - x8_5 - x8_9 + x9_8 - x8_10 + x10_8 - x8_11 + x11_8 - b8 + 70.0 = 0;
    A[8, 13] = 1.0
    A[8, 14] = -1.0
    A[8, 15] = -1.0
    A[8, 16] = 1.0
    A[8, 17] = -1.0
    A[8, 18] = 1.0
    A[8, 19] = -1.0
    A[8, 20] = 1.0
    A[8, 28] = -1.0
    # subject to n9: x8_9 - x9_8 - b9 + 19.0 = 0;
    A[9, 15] = 1.0
    A[9, 16] = -1.0
    A[9, 29] = -1.0
    # subject to n10: x8_10 - x10_8 - b10 + 19.0 = 0;
    A[10, 17] = 1.0
    A[10, 18] = -1.0
    A[10, 30] = -1.0
    # subject to n11: x8_11 - x11_8 - b11 + 19.0 = 0;
    A[11, 19] = 1.0
    A[11, 20] = -1.0
    A[11, 31] = -1.0

    b = [-95.0; -95.0; -19.0; -70; -70; -19; -19; -70; -19; -19; -19]

    # bounds
    lb = zeros(31)
    ub = 99.99 * ones(31) # b variables
    ub[23] = 19.99
    ub[26] = 19.99
    ub[27] = 19.99
    ub[29] = 19.99
    ub[30] = 19.99
    ub[31] = 19.99
    ub[1:20] .= +Inf # Correspond to the x decision variables

    p = NomadProblem(31, 21, vcat(["OBJ"], ["PB" for i in 1:20]), bb,
                     lower_bound = lb,
                     upper_bound = ub,
                     A = A, b = b)

    p.options.max_bb_eval = 1500
    # p.options.linear_converter = "QR"

    x0 = [0.60093952645423476255359673814382;
          8.9813193490632787785443724715151;
          4.8901799178016949198877227900084;
          2.4845611050860867408118792809546;
          5.2626489205992195152816748304758;
          7.2890206634254974815689820388798;
          6.2667828138721084485496248817071;
          4.8424768389452612638024220359512;
          3.7507643958445160414783003943739;
          6.8102373808264555776759152649902;
          0.13298561365865385619500216307642;
          5.2352696486519665342029838939197;
          6.2006550004563649736155639402568;
          2.7707509319376479872687468741788;
          0.37407584613383138005815453652758;
          2.2812025883515372193244274967583;
          4.7329262796511653021980237099342;
          6.2531548795012934505166413146071;
          0.0010420674342158304289535086795127;
          4.1782514004393140893967029114719;
          86.619620177390956428098434116691;
          97.405618812715601961826905608177;
          16.973628257173722033712692791596;
          76.576826777792888378826319240034;
          76.156158926383383800384763162583;
          15.940527015018060907891594979446;
          13.897715965006687710570076887961;
          81.034468743591645534252165816724;
          17.092873257782294160733727039769;
          17.479771400149871851681382395327;
          14.822790666994901442876653163694]

    result = solve(p, x0)

    # solve problem
    @test length(result.x_best_feas) == 31
    @test bb(result.x_best_feas)[3] ≈ result.bbo_best_feas
    @test result.x_best_inf === nothing
    @test isapprox(A * result.x_best_feas, b, atol=1e-9)
    @test all(lb .<= result.x_best_feas .<= ub)

end
