@testset "Constrained linear example 7: Dallas" begin

    # blackbox
    function bb(x)
        f = 0.5 * (-min(x[1], sqrt(448.06)) * sqrt(max(251.2 * (448.06 - min(x[1], sqrt(448.06)) * min(x[1], sqrt(448.06))), 1e-14)) - 448.06 * (sqrt(251.2) * asin(min(x[1], sqrt(448.06)) / sqrt(448.06)))) +
        0.5 * (-min(x[2], sqrt(1915.26)) * sqrt(max(64.63 * (1915.26 - min(x[2], sqrt(1915.26)) * min(x[2], sqrt(1915.26))), 1e-14)) - 1915.26 * (sqrt(64.63) * asin(min(x[2], sqrt(1915.26)) / sqrt(1915.26)))) +
        0.5 * (-min(x[3], sqrt(1077.52)) * sqrt(max(48.14 * (1077.52 - min(x[3], sqrt(1077.52)) * min(x[3], sqrt(1077.52))), 1e-14)) - 1077.52 * (sqrt(48.14) * asin(min(x[3], sqrt(1077.52)) / sqrt(1077.52)))) +
        (((850559.0 / 2.85 * 6900.0) / (122.0^1.85)) / (66.0^4.87)) * abs(x[4])^2 * abs(x[4])^0.85 +
        (((850559.0 / 2.85 * 100.0) / (100.0^1.85)) / (10.0^4.87)) * abs(x[5])^2 * abs(x[5])^0.85 +
        (((850559.0 / 2.85 * 663.0) / (120.0^1.85)) / (36.0^4.87)) * abs(x[6])^2 * abs(x[6])^0.85 +
        (((850559.0 / 2.85 * 5100.0) / (122.0^1.85)) / (66.0^4.87)) * abs(x[7])^2 * abs(x[7])^0.85 +
        (((850559.0 / 2.85 * 645.0) / (120.0^1.85)) / (30.0^4.87)) * abs(x[8])^2 * abs(x[8])^0.85 +
        (((850559.0 / 2.85 * 7400.0) / (122.0^1.85)) / (66.0^4.87)) * abs(x[9])^2 * abs(x[9])^0.85 +
        (((850559.0 / 2.85 * 5000.0) / (95.0^1.85)) / (66.0^4.87)) * abs(x[10])^2 * abs(x[10])^0.85 +
        (((850559.0 / 2.85 * 800.0) / (107.0^1.85)) / (54.0^4.87)) * abs(x[11])^2 * abs(x[11])^0.85 +
        (((850559.0 / 2.85 * 5200.0) / (110.00000000000001^1.85)) / (48.0^4.87)) * abs(x[12])^2 * abs(x[12])^0.85 +
        (((850559.0 / 2.85 * 6000.0) / (110.00000000000001^1.85)) / (48.0^4.87)) * abs(x[13])^2 * abs(x[13])^0.85 +
        (((850559.0 / 2.85 * 400.0) / (100.0^1.85)) / (54.0^4.87)) * abs(x[14])^2 * abs(x[14])^0.85 +
        (((850559.0 / 2.85 * 40.0) / (130.0^1.85)) / (31.22^4.87)) * abs(x[15])^2 * abs(x[15])^0.85 +
        (((850559.0 / 2.85 * 4500.0) / (122.0^1.85)) / (66.0^4.87)) * abs(x[16])^2 * abs(x[16])^0.85 +
        (((850559.0 / 2.85 * 5100.0) / (110.00000000000001^1.85)) / (24.0^4.87)) * abs(x[17])^2 * abs(x[17])^0.85 +
        (((850559.0 / 2.85 * 30.0) / (118.0^1.85)) / (48.0^4.87)) * abs(x[18])^2 * abs(x[18])^0.85 +
        0.5 * (-min(x[19], sqrt(484.53)) * sqrt(max(112.97 * (484.53 - min(x[19], sqrt(484.53)) * min(x[19], sqrt(484.53))), 1e-14)) - 484.53 * (sqrt(112.97) * asin(min(x[19], sqrt(484.53)) / sqrt(484.53)))) +
        (((850559.0 / 2.85 * 26000.0) / (110.00000000000001^1.85)) / (48.0^4.87)) * abs(x[20])^2 * abs(x[20])^0.85 +
        0.5 * (-min(x[21], sqrt(186.88)) * sqrt(max(160.61 * (186.88 - min(x[21], sqrt(186.88)) * min(x[21], sqrt(186.88))), 1e-14)) - 186.88 * (sqrt(160.61) * asin(min(x[21], sqrt(186.88)) / sqrt(186.88)))) +
        (((850559.0 / 2.85 * 520.0) / (130.0^1.85)) / (33.61^4.87)) * abs(x[22])^2 * abs(x[22])^0.85 +
        (((850559.0 / 2.85 * 4600.0) / (95.0^1.85)) / (54.0^4.87)) * abs(x[23])^2 * abs(x[23])^0.85 +
        (((850559.0 / 2.85 * 5400.0) / (95.0^1.85)) / (54.0^4.87)) * abs(x[24])^2 * abs(x[24])^0.85 +
        (((850559.0 / 2.85 * 5600.0) / (110.00000000000001^1.85)) / (12.0^4.87)) * abs(x[25])^2 * abs(x[25])^0.85 +
        (((850559.0 / 2.85 * 3300.0) / (110.00000000000001^1.85)) / (12.0^4.87)) * abs(x[26])^2 * abs(x[26])^0.85 +
        (((850559.0 / 2.85 * 2200.0) / (124.0^1.85)) / (24.0^4.87)) * abs(x[27])^2 * abs(x[27])^0.85 +
        (((850559.0 / 2.85 * 1000.0) / (110.00000000000001^1.85)) / (24.0^4.87)) * abs(x[28])^2 * abs(x[28])^0.85 +
        (((850559.0 / 2.85 * 5900.0) / (112.99999999999999^1.85)) / (24.0^4.87)) * abs(x[29])^2 * abs(x[29])^0.85 +
        (((850559.0 / 2.85 * 2800.0) / (112.99999999999999^1.85)) / (24.0^4.87)) * abs(x[30])^2 * abs(x[30])^0.85 +
        (((850559.0 / 2.85 * 2700.0) / (110.00000000000001^1.85)) / (12.0^4.87)) * abs(x[31])^2 * abs(x[31])^0.85 +
        (((850559.0 / 2.85 * 3100.0) / (95.0^1.85)) / (54.0^4.87)) * abs(x[32])^2 * abs(x[32])^0.85 +
        (((850559.0 / 2.85 * 100.0) / (100.0^1.85)) / (10.0^4.87)) * abs(x[33])^2 * abs(x[33])^0.85 +
        (((850559.0 / 2.85 * 4300.0) / (112.99999999999999^1.85)) / (24.0^4.87)) * abs(x[34])^2 * abs(x[34])^0.85 +
        (((850559.0 / 2.85 * 2200.0) / (95.0^1.85)) / (54.0^4.87)) * abs(x[35])^2 * abs(x[35])^0.85 +
        (((850559.0 / 2.85 * 1800.0) / (110.00000000000001^1.85)) / (54.0^4.87)) * abs(x[36])^2 * abs(x[36])^0.85 +
        (((850559.0 / 2.85 * 100.0) / (110.00000000000001^1.85)) / (24.0^4.87)) * abs(x[37])^2 * abs(x[37])^0.85 +
        (((850559.0 / 2.85 * 1310.0) / (100.0^1.85)) / (30.0^4.87)) * abs(x[38])^2 * abs(x[38])^0.85 +
        (((850559.0 / 2.85 * 665.0) / (120.0^1.85)) / (36.0^4.87)) * abs(x[39])^2 * abs(x[39])^0.85 +
        (((850559.0 / 2.85 * 1100.0) / (120.0^1.85)) / (36.0^4.87)) * abs(x[40])^2 * abs(x[40])^0.85 +
        (((850559.0 / 2.85 * 32.3) / (100.0^1.85)) / (10.0^4.87)) * abs(x[41])^2 * abs(x[41])^0.85 -
        638.4000000000001 * x[42] - 633.0 * x[43] - 554.5 * x[44] - 505.0 * x[45] - 436.9 * x[46]
        bb_outputs = [f]
        success = true
        count_eval = true
        return (success, count_eval, bb_outputs)
    end

    # linear constraints
    A = zeros(30, 46)
    A[1, 46] = 1.0
    A[1, 41] = 1.0
    A[1, 1] = -1.0
    A[2, 45] = 1.0
    A[2, 2] = -1.0
    A[3, 44] = 1.0
    A[3, 3] = -1.0
    A[4, 4] = -1.0
    A[5, 16] = 1.0
    A[5, 7] = -1.0
    A[5, 6] = -1.0
    A[5, 5] = -1.0
    A[6, 7] = 1.0
    A[6, 9] = -1.0
    A[6, 8] = -1.0
    A[7, 9] = 1.0
    A[7, 10] = -1.0
    A[8, 10] = 1.0
    A[8, 2] = 1.0
    A[8, 12] = -1.0
    A[8, 11] = -1.0
    A[9, 12] = 1.0
    A[9, 3] = 1.0
    A[9, 13] = -1.0
    A[10, 4] = 1.0
    A[10, 16] = -1.0
    A[10, 15] = -1.0
    A[10, 14] = -1.0
    A[11, 15] = 1.0
    A[11, 13] = 1.0
    A[11, 5] = 1.0
    A[11, 17] = -1.0
    A[12, 20] = 1.0
    A[12, 19] = 1.0
    A[12, 8] = 1.0
    A[12, 6] = 1.0
    A[12, 18] = -1.0
    A[13, 42] = 1.0
    A[13, 18] = 1.0
    A[13, 19] = -1.0
    A[14, 21] = 1.0
    A[14, 20] = -1.0
    A[15, 43] = 1.0
    A[15, 21] = -1.0
    A[16, 14] = 1.0
    A[16, 11] = 1.0
    A[16, 23] = -1.0
    A[16, 22] = -1.0
    A[17, 23] = 1.0
    A[17, 25] = -1.0
    A[17, 24] = -1.0
    A[18, 31] = 1.0
    A[18, 25] = 1.0
    A[18, 22] = 1.0
    A[18, 26] = -1.0
    A[19, 26] = 1.0
    A[19, 17] = 1.0
    A[19, 28] = -1.0
    A[19, 27] = -1.0
    A[20, 28] = 1.0
    A[21, 31] = -1.0
    A[21, 30] = -1.0
    A[21, 29] = -1.0
    A[22, 30] = 1.0
    A[22, 27] = 1.0
    A[23, 24] = 1.0
    A[23, 32] = -1.0
    A[24, 38] = 1.0
    A[24, 29] = 1.0
    A[24, 34] = -1.0
    A[24, 33] = -1.0
    A[25, 32] = 1.0
    A[25, 35] = -1.0
    A[26, 35] = 1.0
    A[26, 37] = -1.0
    A[26, 36] = -1.0
    A[27, 37] = 1.0
    A[27, 34] = 1.0
    A[28, 36] = 1.0
    A[28, 40] = -1.0
    A[28, 39] = -1.0
    A[28, 38] = -1.0
    A[29, 39] = 1.0
    A[29, 33] = 1.0
    A[29, 1] = 1.0
    A[30, 40] = 1.0
    A[30, 41] = -1.0
    b = [0; 0; 0; 0; 2.8; 0; 0.403; 0.592; 1.156; 0.2; 0.495; 0; 0; 0; 0; 0.313; 0.844; 0.331; 0.053; 0; 0.272; 0.883; 0.571; 0.755; 0; 0.527; 0; 0; 0.0010; 0]

    # bounds
    lb = -200.0 * ones(46)
    lb[1] = 0.0
    lb[2] = 0.0
    lb[3] = 0.0
    lb[19] = 0.0
    lb[21] = 0.0
    ub = 200.0 * ones(46)
    ub[1] = 21.1673
    ub[2] = 43.7635
    ub[3] = 32.8255
    ub[19] = 22.012
    ub[21] = 13.6703

    p = NomadProblem(46, 1, ["OBJ"], bb,
                     lower_bound = lb,
                     upper_bound = ub,
                     A = A, b = b)

    p.options.max_bb_eval = 1000
    p.options.linear_converter = "QR"

    x0 = [0.83664758048025811287828901186003;
          3.3907931209257293758696505392436;
          2.0472068790742703470186825143173;
          0;
          0;
          -3.2029999999999998472333118115785;
          0.40300000000000002486899575160351;
          0;
          0.40300000000000002486899575160351;
          0;
          3.6900000000000003907985046680551;
          -0.89120687907427043050745396612911;
          0;
          0;
          -0.20000000000000001110223024625157;
          0;
          -0.69500000000000006217248937900877;
          8.8191877842418779920308224973269;
          7.3172934448115878325324956676923;
          4.7048943394302895626424287911505;
          4.7048943394302895626424287911505;
          1.9620000000000001882938249764265;
          1.415000000000000035527136788005;
          0.57099999999999995203836533619324;
          0;
          1.6310000000000002273736754432321;
          0.883000000000000007105427357601;
          0;
          -0.27200000000000001953992523340276;
          0;
          0;
          0;
          -0.83564758048025811199011059215991;
          0;
          0;
          -0.52700000000000002398081733190338;
          0;
          0.19135241951974191199070673974347;
          0;
          -0.71835241951974193597152407164685;
          -0.71835241951974193597152407164685;
          -1.5018943394302901594983268296346;
          4.7048943394302895626424287911505;
          2.0472068790742703470186825143173;
          3.3907931209257293758696505392436;
          1.5550000000000001598721155460225];

    result = solve(p, x0)

    # solve problem
    @test length(result.x_best_feas) == 46
    @test bb(result.x_best_feas)[3] ≈ result.bbo_best_feas
    @test result.x_best_inf == nothing
    @test isapprox(A * result.x_best_feas, b, atol=1e-9)
    @test all(lb .<= result.x_best_feas .<= ub)

end
