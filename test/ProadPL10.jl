@testset "Constrained linear example 10: ProadPL10" begin

    # blackbox
    function bb(x)

        # inequality linear constraints
        B = zeros(5, 60)
        B[1,1] = 1.0
        B[1,2] = 1.0
        B[1,3] = 1.0
        B[1,4] = 1.0
        B[2,5] = 1.0
        B[2,6] = 1.0
        B[2,7] = 1.0
        B[2,8] = 1.0
        B[3,9] = 1.0
        B[3,10] = 1.0
        B[3,11] = 1.0
        B[3,12] = 1.0
        B[4,13] = 1.0
        B[4,14] = 1.0
        B[4,15] = 1.0
        B[4,16] = 1.0
        B[5,17] = 1.0
        B[5,18] = 1.0
        B[5,19] = 1.0
        B[5,20] = 1.0
        d = [3.0; 6.0; 10.0; 2000.0; 18.0]
        cl = B * x - d

        # inequality quadratic constraints
        cq1 = ((x[7]+x[8])-x[3]+x[4])^2 - 0.1^2 * (x[3]+x[4])^2
        cq2 = ((x[11]+x[12])-x[7]+x[8])^2 - 0.1^2 * (x[7]+x[8])^2
        cq3 = (x[15]+x[16]-x[11]+x[12])^2 - 0.1^2 * (x[11]+x[12])^2
        cq4 =  (x[19]+x[20]-x[15]+x[16])^2 - 0.1^2 * (x[15]+x[16])^2

        # objective
        f = x[21] + 2.0*x[22] + 2.0*x[23] + 3.0*x[24] + 3.0*x[25] +
        2.0*x[26] + 4.0*x[27] + 5.0*x[28] + x[29] + 2.0*x[30] +
        2.0*x[31] + 3.0*x[32] + 3.0*x[33] + 2.0*x[34] + 4.0*x[35] +
        5.0*x[36] + x[37] + 2.0*x[38] + 2.0*x[39] + 3.0*x[40] +
        3.0*x[41] + 2.0*x[42] + 4.0*x[43] + 5.0*x[44] + x[45] +
        2.0*x[46] + 2.0*x[47] + 3.0*x[48] + 3.0*x[49] + 2.0*x[50] +
        4.0*x[51] + 5.0*x[52] + x[53] + 2.0*x[54] + 2.0*x[55] +
        3.0*x[56] + 3.0*x[57] + 2.0*x[58] + 4.0*x[59] + 5.0*x[60]
        bb_outputs = vcat([f], cl, [cq1; cq2; cq3; cq4])
        success = true
        count_eval = true
        return (success, count_eval, bb_outputs)
    end

    # linear constraints
    A = zeros(20, 60)
    A[1, 1] = 1.0
    A[1, 21] = -1.0
    A[1, 22] = 1.0
    A[2, 2] = 1.0
    A[2, 23] = -1.0
    A[2, 24] = 1.0
    A[3, 3] = 1.0
    A[3, 25] = -1.0
    A[3, 26] = 1.0
    A[4, 4] = 1.0
    A[4, 27] = -1.0
    A[4, 28] = 1.0
    A[5, 5] = 1.0
    A[5, 21] = 1.0
    A[5, 29] = -1.0
    A[5, 30] = 1.0
    A[6, 6] = 1.0
    A[6, 23] = 1.0
    A[6, 31] = -1.0
    A[6, 32] = 1.0
    A[7, 7] = 1.0
    A[7, 25] = 1.0
    A[7, 33] = -1.0
    A[7, 34] = 1.0
    A[8, 8] = 1.0
    A[8, 27] = 1.0
    A[8, 35] = -1.0
    A[8, 36] = 1.0
    A[9, 9] = 1.0
    A[9, 29] = 1.0
    A[9, 37] = -1.0
    A[9, 38] = 1.0
    A[10, 10] = 1.0
    A[10, 31] = 1.0
    A[10, 39] = -1.0
    A[10, 40] = 1.0
    A[11, 11] = 1.0
    A[11, 33] = 1.0
    A[11, 41] = -1.0
    A[11, 42] = 1.0
    A[12, 12] = 1.0
    A[12, 35] = 1.0
    A[12, 43] = -1.0
    A[12, 44] = 1.0
    A[13, 13] = 1.0
    A[13, 37] = 1.0
    A[13, 45] = -1.0
    A[13, 46] = 1.0
    A[14, 14] = 1.0
    A[14, 39] = 1.0
    A[14, 47] = -1.0
    A[14, 48] = 1.0
    A[15, 15] = 1.0
    A[15, 41] = 1.0
    A[15, 49] = -1.0
    A[15, 50] = 1.0
    A[16, 16] = 1.0
    A[16, 43] = 1.0
    A[16, 51] = -1.0
    A[16, 52] = 1.0
    A[17, 17] = 1.0
    A[17, 45] = 1.0
    A[17, 53] = -1.0
    A[17, 54] = 1.0
    A[18, 18] = 1.0
    A[18, 47] = 1.0
    A[18, 55] = -1.0
    A[18, 56] = 1.0
    A[19, 19] = 1.0
    A[19, 49] = 1.0
    A[19, 57] = -1.0
    A[19, 58] = 1.0
    A[20, 20] = 1.0
    A[20, 51] = 1.0
    A[20, 59] = -1.0
    A[20, 60] = 1.0

    b = [1.0; 1.0; 1.0; 1.0; 2.667; 1.667; 2.667; 3.333; 2.667; 2.0;
         3.0; 3.0; 2.667; 2.667; 2.667; 2.667; 2.667; 2.333; 2.333; 2.333]

    # bounds
    lb = zeros(60)
    ub = 3.0 * ones(60)

    p = NomadProblem(60, 10, vcat(["OBJ"], ["PB" for i in 1:9]), bb,
                     lower_bound = lb,
                     upper_bound = ub,
                     A = A, b = b)

    p.options.max_bb_eval = 1500
    #p.options.linear_converter = "QR"

    x0 = [0.14954129561742054987938388421753;
          0.20844053841381995906267832197045;
          1.9705939400831828933746692200657;
          0.040177095167868125125121281371321;
          0.46348268676468601379170308973698;
          0.12879485343739974223531419283972;
          2.0378211836047768201751750893891;
          0.093672764835643351766236719413428;
          0.16893563343347434146934915588645;
          0.28215074665196648862064421336981;
          1.4889662925223083878023544457392;
          0.66833152109086679804050845632446;
          2.4687979869984757463896585250041;
          1.6212985617091775214504423274775;
          0.92217882337206802390028315130621;
          0.11418572942069127318376331459149;
          0.039766952562627917722171133618758;
          0.30530763946019456867020380741451;
          0.49796483928101131777310683901305;
          0.41366470994964149587858059931023;
          0.62294316502076974018109467579052;
          1.473401869403349273568437634597;
          0.1903164656355334494186593019549;
          0.98187592722171346260040536435554;
          1.5669514287115320350096681067953;
          0.59635748862834914163499888672959;
          0.82753845144750970419522673182655;
          1.7873613562796415443756359309191;
          0.16224461512268537055625472476095;
          1.7428187633372296261313749710098;
          0.63231531922274031298769614295452;
          1.9802040001498069088370357349049;
          1.0899447607776808766288922925014;
          0.1521721484613718644585134143199;
          0.35196300590797408025522940988594;
          2.7637517896248211535237260250142;
          0.28096700189877160669382760715962;
          2.6167867533426116821715368132573;
          0.53554913807367121592051262268797;
          1.6210830721989641922675673413323;
          0.21027562670397870192573464009911;
          0.63136457340398943749448790185852;
          0.41797072502410403949113515409408;
          2.3976761980252634387511534441728;
          0.51037570437666257561204474768601;
          0.42761071547941470472053993034933;
          0.039990356722139235035040627508351;
          0.55014265693929043088417074613972;
          0.032654923214514935958519004088885;
          1.5672004731384681086581167619443;
          0.2635439354899232200502012801735;
          2.3983874810451277781453427451197;
          0.29075621856788619323808120498143;
          2.4076135616285951890347405424109;
          0.54191341962050298963760042170179;
          2.5296154234381691416899684554664;
          0.3499544580287116124495128133276;
          2.152334695533185460192271420965;
          0.67435951417519379713638727480429;
          2.3301508687356293769710191554623]

    result = solve(p, x0)

    # solve problem
    @test length(result.x_best_feas) == 60
    @test bb(result.x_best_feas)[3] â‰ˆ result.bbo_best_feas
    @test result.x_best_inf === nothing
    @test isapprox(A * result.x_best_feas, b, atol=1e-9)
    @test all(lb .<= result.x_best_feas .<= ub)

end
