@testset "Constrained linear example 8: Avion2" begin

    # blackbox
    function bb(x)
        f = (x[8] - 0.01 * x[3] * x[1])^2 + (x[13] - (x[16] - x[15] - x[14] * x[11]) / x[11]^2)^2 +
        (-2 * x[12] + x[15] + x[16] + 0.01 * x[4] / x[11])^2 +
        (x[12] - 0.025 * x[15] * x[14]^2 / x[13])^2 +
        (x[17] - 27.5 * x[7] - 1.3 * x[7]^2)^2 +
        (x[18] - 70 * x[8] + 8.6 * x[8]^2)^2 +
        (x[20] - 1000 + x[22]^2 / 24000)^2 +
        (1000 * x[21] - x[24] * x[25])^2 +
        (x[32] + x[27] + x[34] / 790 + 2 - x[31] / x[28] + x[30] * x[21])^2 +
        (x[36] - 1000 * x[21] / (x[29] + 20) - 12 * sqrt(x[21]))^2 +
        (x[9] - 1.25 * x[1] * x[47])^2 + (x[1] - x[24] / x[42])^2 +
        (x[33] - 2.4 * x[5] * sqrt(x[5]) * x[43] / sqrt(x[6]))^2 +
        (x[15] - 0.785 * x[44]^2 * x[21])^2 +
        (x[16] - 0.785 * x[45]^2 * x[21])^2 +
        (x[14] - 2 * (x[32] - x[13] * x[11]^3) / (x[11]^2 * (3 - x[15] * x[11])))^2 +
        (x[46] - 1.15 * x[5] * (15 + 0.15 * x[5]) * (8 + (x[23] * x[6] / (50 * x[1] * x[43]))^1.5))^2
        bb_outputs = [f]
        success = true
        count_eval = true
        return (success, count_eval, bb_outputs)
    end

    # linear constraints
    A = zeros(15, 49)
    A[1, 7] = 1
    A[1, 1] = -0.13
    A[2, 5] = 1
    A[2, 1] = -0.7
    A[3, 6] = 1
    A[3, 2] = -1
    A[4, 10] = 1
    A[4, 9] = -1
    A[4, 7] = -2
    A[4, 5] = -2
    A[4, 8] = -2
    A[5, 19] = 1
    A[5, 10] = -20
    A[6, 24] = 1
    A[6, 22] = -2
    A[7, 34] = 1
    A[7, 20] = -1
    A[7, 33] = -1
    A[8, 35] = 1
    A[8, 22] = -0.137
    A[9, 37] = 1
    A[9, 47] = -35
    A[10, 38] = 1
    A[10, 20] = -0.043
    A[11, 39] = 1
    A[11, 48] = -200
    A[12, 40] = 1
    A[12, 49] = -120
    A[13, 41] = 1
    A[13, 26] = -300
    A[14, 23] = 1
    A[14, 22] = -1
    A[14, 48] = 95
    A[14, 49] = 70
    A[14, 47] = 660
    A[14, 20] = 0.5
    A[15, 31] = 1
    A[15, 35] = -1
    A[15, 37] = 1
    A[15, 38] = 1
    A[15, 39] = 1
    A[15, 40] = 1
    A[15, 41] = 1
    b = [0;0;0;0;0;0;0;0;0;0;0;0;400.0;380.0;-290.0]

    # bounds
    lb = zeros(49)
    lb[1] = 10.0
    lb[2] = 0.0
    lb[3] = 0.0
    lb[4] = 0.0
    lb[5] = 7.0
    lb[6] = 1.5
    lb[7] = 2.0
    lb[8] = 2.0
    lb[9] = 30.0
    lb[10] = 20.0
    lb[11] = 0.01
    lb[12] = 0.0
    lb[13] = -0.2
    lb[14] = 0.1
    lb[15] = 0.0
    lb[16] = 0.0
    lb[17] = 100.0
    lb[18] = 500.0
    lb[19] = 500.0
    lb[20] = 1000.0
    lb[21] = 2.0
    lb[22] = 2000.0
    lb[23] = 3000.0
    lb[24] = 5000.0
    lb[25] = 0.2
    lb[26] = 1.0
    lb[27] = 0.0
    lb[28] = 100.0
    lb[29] = 4.0
    lb[30] = 0.0
    lb[31] = 500.0
    lb[32] = 10.0
    lb[33] = 250.0
    lb[34] = 750.0
    lb[35] = 250.0
    lb[36] = 10.0
    lb[37] = 35.0
    lb[38] = 100.0
    lb[39] = 200.0
    lb[40] = 120.0
    lb[41] = 700.0
    lb[42] = 100.0
    lb[43] = 2.0
    lb[44] = 0.0
    lb[45] = 0.0
    lb[46] = 500.0
    lb[47] = 1.0
    lb[48] = 1.0
    lb[49] = 1.0
    ub = zeros(49)
    ub[1] = 150.0
    ub[2] = 10.0
    ub[3] = 10.0
    ub[4] = 5.0
    ub[5] = 120.0
    ub[6] = 8.0
    ub[7] = 20.0
    ub[8] = 30.0
    ub[9] = 500.0
    ub[10] = 200.0
    ub[11] = 20.0
    ub[12] = 10.0
    ub[13] = -0.001
    ub[14] = 2.0
    ub[15] = 1.0
    ub[16] = 2.0
    ub[17] = 1000.0
    ub[18] = 5000.0
    ub[19] = 5000.0
    ub[20] = 20000.0
    ub[21] = 30.0
    ub[22] = 20000.0
    ub[23] = 30000.0
    ub[24] = 50000.0
    ub[25] = 0.8
    ub[26] = 5.0
    ub[27] = 20.0
    ub[28] = 400.0
    ub[29] = 15.0
    ub[30] = 10.0
    ub[31] = 10000.0
    ub[32] = 50.0
    ub[33] = 5000.0
    ub[34] = 15000.0
    ub[35] = 3000.0
    ub[36] = 5000.0
    ub[37] = 70.0
    ub[38] = 3000.0
    ub[39] = 400.0
    ub[40] = 240.0
    ub[41] = 1900.0
    ub[42] = 1000.0
    ub[43] = 20.0
    ub[44] = 1.0
    ub[45] = 2.0
    ub[46] = 5000.0
    ub[47] = 2.0
    ub[48] = 2.0
    ub[49] = 2.0

    p = NomadProblem(49, 1, ["OBJ"], bb,
                     lower_bound = lb,
                     upper_bound = ub,
                     A = A, b = b)

    p.options.max_bb_eval = 1000
    # p.options.linear_converter = "QR"

    x0 = [17.523006910099461208574211923406;
          1.7396384055922218259127021156019;
          9.8155483015509457089819989050739;
          4.7276563374307745135638469946571;
          12.266104837069622846001948346384;
          1.7396384055922218259127021156019;
          2.2779908983129302235681734600803;
          2.0423333560068464009873423492536;
          30.09649322350883693388823303394;
          63.269351406287633210467902245;
          19.824996028811536774583146325313;
          9.7326951953882634427372977370396;
          -0.14215071718311722559491272477317;
          1.7920520977379386096117741544731;
          0.9573472136776395302604214521125;
          1.9036395576817792818502539375913;
          999.72464385613795911922352388501;
          4999.9433579088699843850918114185;
          1265.387028125752749474486336112;
          2326.2591319192042647046037018299;
          29.813061806826997468533591018058;
          15059.729584655400685733184218407;
          13365.372322563673151307739317417;
          30119.459169310801371466368436813;
          0.5999223511217334214862262342649;
          1.1449062775680061143646071286639;
          19.831708920254410344341522431932;
          399.9469517798883089199080131948;
          14.963196757057126262679958017543;
          9.7542019458888269412000227021053;
          500.03223530369297122888383455575;
          49.815168469688430263886402826756;
          250.23503084264669382719148416072;
          2576.4941627618509301100857555866;
          2063.182953097790232277475297451;
          4999.7983247879665213986299932003;
          37.649708515877740921951044583693;
          100.02914267252577928957180120051;
          252.96824148144128230342175811529;
          139.03174185385077521459606941789;
          743.47188327040180411131586879492;
          999.98042825130175970116397365928;
          19.791539409997547238617698894814;
          0.87282323960930774386923758356716;
          1.7724803490397220695484747921;
          4999.7488866236753892735578119755;
          1.0757059575965068898284471288207;
          1.2648412074072064026353245935752;
          1.1585978487820898230609145684866]

    result = solve(p, x0)

    # solve problem
    @test length(result.x_best_feas) == 49
    @test bb(result.x_best_feas)[3] â‰ˆ result.bbo_best_feas
    @test result.x_best_inf === nothing
    @test isapprox(A * result.x_best_feas, b, atol=1e-9)
    @test all(lb .<= result.x_best_feas .<= ub)

end
